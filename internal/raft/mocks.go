// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package raft

import (
	"time"

	"github.com/hashicorp/raft"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRaftInterface creates a new instance of MockRaftInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRaftInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRaftInterface {
	mock := &MockRaftInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRaftInterface is an autogenerated mock type for the RaftInterface type
type MockRaftInterface struct {
	mock.Mock
}

type MockRaftInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRaftInterface) EXPECT() *MockRaftInterface_Expecter {
	return &MockRaftInterface_Expecter{mock: &_m.Mock}
}

// AddVoter provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) AddVoter(id raft.ServerID, address raft.ServerAddress, prevIndex uint64, timeout time.Duration) raft.IndexFuture {
	ret := _mock.Called(id, address, prevIndex, timeout)

	if len(ret) == 0 {
		panic("no return value specified for AddVoter")
	}

	var r0 raft.IndexFuture
	if returnFunc, ok := ret.Get(0).(func(raft.ServerID, raft.ServerAddress, uint64, time.Duration) raft.IndexFuture); ok {
		r0 = returnFunc(id, address, prevIndex, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.IndexFuture)
		}
	}
	return r0
}

// MockRaftInterface_AddVoter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVoter'
type MockRaftInterface_AddVoter_Call struct {
	*mock.Call
}

// AddVoter is a helper method to define mock.On call
//   - id
//   - address
//   - prevIndex
//   - timeout
func (_e *MockRaftInterface_Expecter) AddVoter(id interface{}, address interface{}, prevIndex interface{}, timeout interface{}) *MockRaftInterface_AddVoter_Call {
	return &MockRaftInterface_AddVoter_Call{Call: _e.mock.On("AddVoter", id, address, prevIndex, timeout)}
}

func (_c *MockRaftInterface_AddVoter_Call) Run(run func(id raft.ServerID, address raft.ServerAddress, prevIndex uint64, timeout time.Duration)) *MockRaftInterface_AddVoter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(raft.ServerID), args[1].(raft.ServerAddress), args[2].(uint64), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRaftInterface_AddVoter_Call) Return(indexFuture raft.IndexFuture) *MockRaftInterface_AddVoter_Call {
	_c.Call.Return(indexFuture)
	return _c
}

func (_c *MockRaftInterface_AddVoter_Call) RunAndReturn(run func(id raft.ServerID, address raft.ServerAddress, prevIndex uint64, timeout time.Duration) raft.IndexFuture) *MockRaftInterface_AddVoter_Call {
	_c.Call.Return(run)
	return _c
}

// Apply provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) Apply(cmd []byte, timeout time.Duration) raft.ApplyFuture {
	ret := _mock.Called(cmd, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 raft.ApplyFuture
	if returnFunc, ok := ret.Get(0).(func([]byte, time.Duration) raft.ApplyFuture); ok {
		r0 = returnFunc(cmd, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.ApplyFuture)
		}
	}
	return r0
}

// MockRaftInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockRaftInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - cmd
//   - timeout
func (_e *MockRaftInterface_Expecter) Apply(cmd interface{}, timeout interface{}) *MockRaftInterface_Apply_Call {
	return &MockRaftInterface_Apply_Call{Call: _e.mock.On("Apply", cmd, timeout)}
}

func (_c *MockRaftInterface_Apply_Call) Run(run func(cmd []byte, timeout time.Duration)) *MockRaftInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockRaftInterface_Apply_Call) Return(applyFuture raft.ApplyFuture) *MockRaftInterface_Apply_Call {
	_c.Call.Return(applyFuture)
	return _c
}

func (_c *MockRaftInterface_Apply_Call) RunAndReturn(run func(cmd []byte, timeout time.Duration) raft.ApplyFuture) *MockRaftInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfiguration provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) GetConfiguration() raft.ConfigurationFuture {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 raft.ConfigurationFuture
	if returnFunc, ok := ret.Get(0).(func() raft.ConfigurationFuture); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.ConfigurationFuture)
		}
	}
	return r0
}

// MockRaftInterface_GetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfiguration'
type MockRaftInterface_GetConfiguration_Call struct {
	*mock.Call
}

// GetConfiguration is a helper method to define mock.On call
func (_e *MockRaftInterface_Expecter) GetConfiguration() *MockRaftInterface_GetConfiguration_Call {
	return &MockRaftInterface_GetConfiguration_Call{Call: _e.mock.On("GetConfiguration")}
}

func (_c *MockRaftInterface_GetConfiguration_Call) Run(run func()) *MockRaftInterface_GetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftInterface_GetConfiguration_Call) Return(configurationFuture raft.ConfigurationFuture) *MockRaftInterface_GetConfiguration_Call {
	_c.Call.Return(configurationFuture)
	return _c
}

func (_c *MockRaftInterface_GetConfiguration_Call) RunAndReturn(run func() raft.ConfigurationFuture) *MockRaftInterface_GetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// LastContact provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) LastContact() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastContact")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockRaftInterface_LastContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastContact'
type MockRaftInterface_LastContact_Call struct {
	*mock.Call
}

// LastContact is a helper method to define mock.On call
func (_e *MockRaftInterface_Expecter) LastContact() *MockRaftInterface_LastContact_Call {
	return &MockRaftInterface_LastContact_Call{Call: _e.mock.On("LastContact")}
}

func (_c *MockRaftInterface_LastContact_Call) Run(run func()) *MockRaftInterface_LastContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftInterface_LastContact_Call) Return(time1 time.Time) *MockRaftInterface_LastContact_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockRaftInterface_LastContact_Call) RunAndReturn(run func() time.Time) *MockRaftInterface_LastContact_Call {
	_c.Call.Return(run)
	return _c
}

// Leader provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) Leader() raft.ServerAddress {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Leader")
	}

	var r0 raft.ServerAddress
	if returnFunc, ok := ret.Get(0).(func() raft.ServerAddress); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(raft.ServerAddress)
	}
	return r0
}

// MockRaftInterface_Leader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leader'
type MockRaftInterface_Leader_Call struct {
	*mock.Call
}

// Leader is a helper method to define mock.On call
func (_e *MockRaftInterface_Expecter) Leader() *MockRaftInterface_Leader_Call {
	return &MockRaftInterface_Leader_Call{Call: _e.mock.On("Leader")}
}

func (_c *MockRaftInterface_Leader_Call) Run(run func()) *MockRaftInterface_Leader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftInterface_Leader_Call) Return(serverAddress raft.ServerAddress) *MockRaftInterface_Leader_Call {
	_c.Call.Return(serverAddress)
	return _c
}

func (_c *MockRaftInterface_Leader_Call) RunAndReturn(run func() raft.ServerAddress) *MockRaftInterface_Leader_Call {
	_c.Call.Return(run)
	return _c
}

// LeaderWithID provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) LeaderWithID() (raft.ServerAddress, raft.ServerID) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LeaderWithID")
	}

	var r0 raft.ServerAddress
	var r1 raft.ServerID
	if returnFunc, ok := ret.Get(0).(func() (raft.ServerAddress, raft.ServerID)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() raft.ServerAddress); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(raft.ServerAddress)
	}
	if returnFunc, ok := ret.Get(1).(func() raft.ServerID); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(raft.ServerID)
	}
	return r0, r1
}

// MockRaftInterface_LeaderWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaderWithID'
type MockRaftInterface_LeaderWithID_Call struct {
	*mock.Call
}

// LeaderWithID is a helper method to define mock.On call
func (_e *MockRaftInterface_Expecter) LeaderWithID() *MockRaftInterface_LeaderWithID_Call {
	return &MockRaftInterface_LeaderWithID_Call{Call: _e.mock.On("LeaderWithID")}
}

func (_c *MockRaftInterface_LeaderWithID_Call) Run(run func()) *MockRaftInterface_LeaderWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftInterface_LeaderWithID_Call) Return(serverAddress raft.ServerAddress, serverID raft.ServerID) *MockRaftInterface_LeaderWithID_Call {
	_c.Call.Return(serverAddress, serverID)
	return _c
}

func (_c *MockRaftInterface_LeaderWithID_Call) RunAndReturn(run func() (raft.ServerAddress, raft.ServerID)) *MockRaftInterface_LeaderWithID_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) State() raft.RaftState {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 raft.RaftState
	if returnFunc, ok := ret.Get(0).(func() raft.RaftState); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(raft.RaftState)
	}
	return r0
}

// MockRaftInterface_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockRaftInterface_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
func (_e *MockRaftInterface_Expecter) State() *MockRaftInterface_State_Call {
	return &MockRaftInterface_State_Call{Call: _e.mock.On("State")}
}

func (_c *MockRaftInterface_State_Call) Run(run func()) *MockRaftInterface_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftInterface_State_Call) Return(raftState raft.RaftState) *MockRaftInterface_State_Call {
	_c.Call.Return(raftState)
	return _c
}

func (_c *MockRaftInterface_State_Call) RunAndReturn(run func() raft.RaftState) *MockRaftInterface_State_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function for the type MockRaftInterface
func (_mock *MockRaftInterface) Stats() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockRaftInterface_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockRaftInterface_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
func (_e *MockRaftInterface_Expecter) Stats() *MockRaftInterface_Stats_Call {
	return &MockRaftInterface_Stats_Call{Call: _e.mock.On("Stats")}
}

func (_c *MockRaftInterface_Stats_Call) Run(run func()) *MockRaftInterface_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaftInterface_Stats_Call) Return(stringToString map[string]string) *MockRaftInterface_Stats_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockRaftInterface_Stats_Call) RunAndReturn(run func() map[string]string) *MockRaftInterface_Stats_Call {
	_c.Call.Return(run)
	return _c
}
