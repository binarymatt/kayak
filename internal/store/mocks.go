// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	kayakv1 "github.com/binarymatt/kayak/gen/kayak/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// GetStream provides a mock function for the type MockStore
func (_mock *MockStore) GetStream(stream string) (*kayakv1.Stream, error) {
	ret := _mock.Called(stream)

	if len(ret) == 0 {
		panic("no return value specified for GetStream")
	}

	var r0 *kayakv1.Stream
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*kayakv1.Stream, error)); ok {
		return returnFunc(stream)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *kayakv1.Stream); ok {
		r0 = returnFunc(stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kayakv1.Stream)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(stream)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStream'
type MockStore_GetStream_Call struct {
	*mock.Call
}

// GetStream is a helper method to define mock.On call
//   - stream
func (_e *MockStore_Expecter) GetStream(stream interface{}) *MockStore_GetStream_Call {
	return &MockStore_GetStream_Call{Call: _e.mock.On("GetStream", stream)}
}

func (_c *MockStore_GetStream_Call) Run(run func(stream string)) *MockStore_GetStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStore_GetStream_Call) Return(stream1 *kayakv1.Stream, err error) *MockStore_GetStream_Call {
	_c.Call.Return(stream1, err)
	return _c
}

func (_c *MockStore_GetStream_Call) RunAndReturn(run func(stream string) (*kayakv1.Stream, error)) *MockStore_GetStream_Call {
	_c.Call.Return(run)
	return _c
}

// PutRecords provides a mock function for the type MockStore
func (_mock *MockStore) PutRecords(stream string, records ...*kayakv1.Record) error {
	var tmpRet mock.Arguments
	if len(records) > 0 {
		tmpRet = _mock.Called(stream, records)
	} else {
		tmpRet = _mock.Called(stream)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutRecords")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ...*kayakv1.Record) error); ok {
		r0 = returnFunc(stream, records...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_PutRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRecords'
type MockStore_PutRecords_Call struct {
	*mock.Call
}

// PutRecords is a helper method to define mock.On call
//   - stream
//   - records
func (_e *MockStore_Expecter) PutRecords(stream interface{}, records ...interface{}) *MockStore_PutRecords_Call {
	return &MockStore_PutRecords_Call{Call: _e.mock.On("PutRecords",
		append([]interface{}{stream}, records...)...)}
}

func (_c *MockStore_PutRecords_Call) Run(run func(stream string, records ...*kayakv1.Record)) *MockStore_PutRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*kayakv1.Record, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*kayakv1.Record)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockStore_PutRecords_Call) Return(err error) *MockStore_PutRecords_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_PutRecords_Call) RunAndReturn(run func(stream string, records ...*kayakv1.Record) error) *MockStore_PutRecords_Call {
	_c.Call.Return(run)
	return _c
}
