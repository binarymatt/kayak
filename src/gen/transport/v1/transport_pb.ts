// @generated by protoc-gen-es v2.3.0 with parameter "target=ts"
// @generated from file transport/v1/transport.proto (package transport.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file transport/v1/transport.proto.
 */
export const file_transport_v1_transport: GenFile = /*@__PURE__*/
  fileDesc("Chx0cmFuc3BvcnQvdjEvdHJhbnNwb3J0LnByb3RvEgx0cmFuc3BvcnQudjEiPwoJUlBDSGVhZGVyEhgKEHByb3RvY29sX3ZlcnNpb24YASABKAMSCgoCaWQYAiABKAwSDAoEYWRkchgDIAEoDCKuAgoDTG9nEg0KBWluZGV4GAEgASgEEgwKBHRlcm0YAiABKAQSJwoEdHlwZRgDIAEoDjIZLnRyYW5zcG9ydC52MS5Mb2cuTG9nVHlwZRIMCgRkYXRhGAQgASgMEhIKCmV4dGVuc2lvbnMYBSABKAwSLwoLYXBwZW5kZWRfYXQYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIo0BCgdMb2dUeXBlEg8KC0xPR19DT01NQU5EEAASDAoITE9HX05PT1AQARIbChdMT0dfQUREX1BFRVJfREVQUkVDQVRFRBACEh4KGkxPR19SRU1PVkVfUEVFUl9ERVBSRUNBVEVEEAMSDwoLTE9HX0JBUlJJRVIQBBIVChFMT0dfQ09ORklHVVJBVElPThAFItEBChRBcHBlbmRFbnRyaWVzUmVxdWVzdBIrCgpycGNfaGVhZGVyGAEgASgLMhcudHJhbnNwb3J0LnYxLlJQQ0hlYWRlchIMCgR0ZXJtGAIgASgEEg4KBmxlYWRlchgDIAEoDBIWCg5wcmV2X2xvZ19lbnRyeRgEIAEoBBIVCg1wcmV2X2xvZ190ZXJtGAUgASgEEiIKB2VudHJpZXMYBiADKAsyES50cmFuc3BvcnQudjEuTG9nEhsKE2xlYWRlcl9jb21taXRfaW5kZXgYByABKAQijwEKFUFwcGVuZEVudHJpZXNSZXNwb25zZRIrCgpycGNfaGVhZGVyGAEgASgLMhcudHJhbnNwb3J0LnYxLlJQQ0hlYWRlchIMCgR0ZXJtGAIgASgEEhAKCGxhc3RfbG9nGAMgASgEEg8KB3N1Y2Nlc3MYBCABKAgSGAoQbm9fcmV0cnlfYmFja29mZhgFIAEoCCKuAQoSUmVxdWVzdFZvdGVSZXF1ZXN0EisKCnJwY19oZWFkZXIYASABKAsyFy50cmFuc3BvcnQudjEuUlBDSGVhZGVyEgwKBHRlcm0YAiABKAQSEQoJY2FuZGlkYXRlGAMgASgMEhYKDmxhc3RfbG9nX2luZGV4GAQgASgEEhUKDWxhc3RfbG9nX3Rlcm0YBSABKAQSGwoTbGVhZGVyc2hpcF90cmFuc2ZlchgGIAEoCCJwChNSZXF1ZXN0Vm90ZVJlc3BvbnNlEisKCnJwY19oZWFkZXIYASABKAsyFy50cmFuc3BvcnQudjEuUlBDSGVhZGVyEgwKBHRlcm0YAiABKAQSDQoFcGVlcnMYAyABKAwSDwoHZ3JhbnRlZBgEIAEoCCJAChFUaW1lb3V0Tm93UmVxdWVzdBIrCgpycGNfaGVhZGVyGAEgASgLMhcudHJhbnNwb3J0LnYxLlJQQ0hlYWRlciJBChJUaW1lb3V0Tm93UmVzcG9uc2USKwoKcnBjX2hlYWRlchgBIAEoCzIXLnRyYW5zcG9ydC52MS5SUENIZWFkZXIiiwIKFkluc3RhbGxTbmFwc2hvdFJlcXVlc3QSKwoKcnBjX2hlYWRlchgBIAEoCzIXLnRyYW5zcG9ydC52MS5SUENIZWFkZXISGAoQc25hcHNob3RfdmVyc2lvbhgLIAEoAxIMCgR0ZXJtGAIgASgEEg4KBmxlYWRlchgDIAEoDBIWCg5sYXN0X2xvZ19pbmRleBgEIAEoBBIVCg1sYXN0X2xvZ190ZXJtGAUgASgEEg0KBXBlZXJzGAYgASgMEhUKDWNvbmZpZ3VyYXRpb24YByABKAwSGwoTY29uZmlndXJhdGlvbl9pbmRleBgIIAEoBBIMCgRzaXplGAkgASgDEgwKBGRhdGEYCiABKAwiZQoXSW5zdGFsbFNuYXBzaG90UmVzcG9uc2USKwoKcnBjX2hlYWRlchgBIAEoCzIXLnRyYW5zcG9ydC52MS5SUENIZWFkZXISDAoEdGVybRgCIAEoBBIPCgdzdWNjZXNzGAMgASgIIoEBChVSZXF1ZXN0UHJlVm90ZVJlcXVlc3QSKwoKcnBjX2hlYWRlchgBIAEoCzIXLnRyYW5zcG9ydC52MS5SUENIZWFkZXISDAoEdGVybRgCIAEoBBIWCg5sYXN0X2xvZ19pbmRleBgDIAEoBBIVCg1sYXN0X2xvZ190ZXJtGAQgASgEImQKFlJlcXVlc3RQcmVWb3RlUmVzcG9uc2USKwoKcnBjX2hlYWRlchgBIAEoCzIXLnRyYW5zcG9ydC52MS5SUENIZWFkZXISDAoEdGVybRgCIAEoBBIPCgdncmFudGVkGAMgASgIMr8ECg1SYWZ0VHJhbnNwb3J0EmYKFUFwcGVuZEVudHJpZXNQaXBlbGluZRIiLnRyYW5zcG9ydC52MS5BcHBlbmRFbnRyaWVzUmVxdWVzdBojLnRyYW5zcG9ydC52MS5BcHBlbmRFbnRyaWVzUmVzcG9uc2UiACgBMAESWgoNQXBwZW5kRW50cmllcxIiLnRyYW5zcG9ydC52MS5BcHBlbmRFbnRyaWVzUmVxdWVzdBojLnRyYW5zcG9ydC52MS5BcHBlbmRFbnRyaWVzUmVzcG9uc2UiABJUCgtSZXF1ZXN0Vm90ZRIgLnRyYW5zcG9ydC52MS5SZXF1ZXN0Vm90ZVJlcXVlc3QaIS50cmFuc3BvcnQudjEuUmVxdWVzdFZvdGVSZXNwb25zZSIAElEKClRpbWVvdXROb3cSHy50cmFuc3BvcnQudjEuVGltZW91dE5vd1JlcXVlc3QaIC50cmFuc3BvcnQudjEuVGltZW91dE5vd1Jlc3BvbnNlIgASYgoPSW5zdGFsbFNuYXBzaG90EiQudHJhbnNwb3J0LnYxLkluc3RhbGxTbmFwc2hvdFJlcXVlc3QaJS50cmFuc3BvcnQudjEuSW5zdGFsbFNuYXBzaG90UmVzcG9uc2UiACgBEl0KDlJlcXVlc3RQcmVWb3RlEiMudHJhbnNwb3J0LnYxLlJlcXVlc3RQcmVWb3RlUmVxdWVzdBokLnRyYW5zcG9ydC52MS5SZXF1ZXN0UHJlVm90ZVJlc3BvbnNlIgBCrQEKEGNvbS50cmFuc3BvcnQudjFCDlRyYW5zcG9ydFByb3RvUAFaOGdpdGh1Yi5jb20vYmluYXJ5bWF0dC9rYXlhay9nZW4vdHJhbnNwb3J0L3YxO3RyYW5zcG9ydHYxogIDVFhYqgIMVHJhbnNwb3J0LlYxygIMVHJhbnNwb3J0XFYx4gIYVHJhbnNwb3J0XFYxXEdQQk1ldGFkYXRh6gINVHJhbnNwb3J0OjpWMWIGcHJvdG8z", [file_google_protobuf_timestamp]);

/**
 * @generated from message transport.v1.RPCHeader
 */
export type RPCHeader = Message<"transport.v1.RPCHeader"> & {
  /**
   * @generated from field: int64 protocol_version = 1;
   */
  protocolVersion: bigint;

  /**
   * @generated from field: bytes id = 2;
   */
  id: Uint8Array;

  /**
   * @generated from field: bytes addr = 3;
   */
  addr: Uint8Array;
};

/**
 * Describes the message transport.v1.RPCHeader.
 * Use `create(RPCHeaderSchema)` to create a new message.
 */
export const RPCHeaderSchema: GenMessage<RPCHeader> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 0);

/**
 * @generated from message transport.v1.Log
 */
export type Log = Message<"transport.v1.Log"> & {
  /**
   * @generated from field: uint64 index = 1;
   */
  index: bigint;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: transport.v1.Log.LogType type = 3;
   */
  type: Log_LogType;

  /**
   * @generated from field: bytes data = 4;
   */
  data: Uint8Array;

  /**
   * @generated from field: bytes extensions = 5;
   */
  extensions: Uint8Array;

  /**
   * @generated from field: google.protobuf.Timestamp appended_at = 6;
   */
  appendedAt?: Timestamp;
};

/**
 * Describes the message transport.v1.Log.
 * Use `create(LogSchema)` to create a new message.
 */
export const LogSchema: GenMessage<Log> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 1);

/**
 * @generated from enum transport.v1.Log.LogType
 */
export enum Log_LogType {
  /**
   * @generated from enum value: LOG_COMMAND = 0;
   */
  LOG_COMMAND = 0,

  /**
   * @generated from enum value: LOG_NOOP = 1;
   */
  LOG_NOOP = 1,

  /**
   * @generated from enum value: LOG_ADD_PEER_DEPRECATED = 2;
   */
  LOG_ADD_PEER_DEPRECATED = 2,

  /**
   * @generated from enum value: LOG_REMOVE_PEER_DEPRECATED = 3;
   */
  LOG_REMOVE_PEER_DEPRECATED = 3,

  /**
   * @generated from enum value: LOG_BARRIER = 4;
   */
  LOG_BARRIER = 4,

  /**
   * @generated from enum value: LOG_CONFIGURATION = 5;
   */
  LOG_CONFIGURATION = 5,
}

/**
 * Describes the enum transport.v1.Log.LogType.
 */
export const Log_LogTypeSchema: GenEnum<Log_LogType> = /*@__PURE__*/
  enumDesc(file_transport_v1_transport, 1, 0);

/**
 * @generated from message transport.v1.AppendEntriesRequest
 */
export type AppendEntriesRequest = Message<"transport.v1.AppendEntriesRequest"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: bytes leader = 3;
   */
  leader: Uint8Array;

  /**
   * @generated from field: uint64 prev_log_entry = 4;
   */
  prevLogEntry: bigint;

  /**
   * @generated from field: uint64 prev_log_term = 5;
   */
  prevLogTerm: bigint;

  /**
   * @generated from field: repeated transport.v1.Log entries = 6;
   */
  entries: Log[];

  /**
   * @generated from field: uint64 leader_commit_index = 7;
   */
  leaderCommitIndex: bigint;
};

/**
 * Describes the message transport.v1.AppendEntriesRequest.
 * Use `create(AppendEntriesRequestSchema)` to create a new message.
 */
export const AppendEntriesRequestSchema: GenMessage<AppendEntriesRequest> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 2);

/**
 * @generated from message transport.v1.AppendEntriesResponse
 */
export type AppendEntriesResponse = Message<"transport.v1.AppendEntriesResponse"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: uint64 last_log = 3;
   */
  lastLog: bigint;

  /**
   * @generated from field: bool success = 4;
   */
  success: boolean;

  /**
   * @generated from field: bool no_retry_backoff = 5;
   */
  noRetryBackoff: boolean;
};

/**
 * Describes the message transport.v1.AppendEntriesResponse.
 * Use `create(AppendEntriesResponseSchema)` to create a new message.
 */
export const AppendEntriesResponseSchema: GenMessage<AppendEntriesResponse> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 3);

/**
 * @generated from message transport.v1.RequestVoteRequest
 */
export type RequestVoteRequest = Message<"transport.v1.RequestVoteRequest"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: bytes candidate = 3;
   */
  candidate: Uint8Array;

  /**
   * @generated from field: uint64 last_log_index = 4;
   */
  lastLogIndex: bigint;

  /**
   * @generated from field: uint64 last_log_term = 5;
   */
  lastLogTerm: bigint;

  /**
   * @generated from field: bool leadership_transfer = 6;
   */
  leadershipTransfer: boolean;
};

/**
 * Describes the message transport.v1.RequestVoteRequest.
 * Use `create(RequestVoteRequestSchema)` to create a new message.
 */
export const RequestVoteRequestSchema: GenMessage<RequestVoteRequest> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 4);

/**
 * @generated from message transport.v1.RequestVoteResponse
 */
export type RequestVoteResponse = Message<"transport.v1.RequestVoteResponse"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: bytes peers = 3;
   */
  peers: Uint8Array;

  /**
   * @generated from field: bool granted = 4;
   */
  granted: boolean;
};

/**
 * Describes the message transport.v1.RequestVoteResponse.
 * Use `create(RequestVoteResponseSchema)` to create a new message.
 */
export const RequestVoteResponseSchema: GenMessage<RequestVoteResponse> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 5);

/**
 * @generated from message transport.v1.TimeoutNowRequest
 */
export type TimeoutNowRequest = Message<"transport.v1.TimeoutNowRequest"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;
};

/**
 * Describes the message transport.v1.TimeoutNowRequest.
 * Use `create(TimeoutNowRequestSchema)` to create a new message.
 */
export const TimeoutNowRequestSchema: GenMessage<TimeoutNowRequest> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 6);

/**
 * @generated from message transport.v1.TimeoutNowResponse
 */
export type TimeoutNowResponse = Message<"transport.v1.TimeoutNowResponse"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;
};

/**
 * Describes the message transport.v1.TimeoutNowResponse.
 * Use `create(TimeoutNowResponseSchema)` to create a new message.
 */
export const TimeoutNowResponseSchema: GenMessage<TimeoutNowResponse> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 7);

/**
 * The first InstallSnapshotRequest on the stream contains all the metadata.
 * All further messages contain only data.
 *
 * @generated from message transport.v1.InstallSnapshotRequest
 */
export type InstallSnapshotRequest = Message<"transport.v1.InstallSnapshotRequest"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: int64 snapshot_version = 11;
   */
  snapshotVersion: bigint;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: bytes leader = 3;
   */
  leader: Uint8Array;

  /**
   * @generated from field: uint64 last_log_index = 4;
   */
  lastLogIndex: bigint;

  /**
   * @generated from field: uint64 last_log_term = 5;
   */
  lastLogTerm: bigint;

  /**
   * @generated from field: bytes peers = 6;
   */
  peers: Uint8Array;

  /**
   * @generated from field: bytes configuration = 7;
   */
  configuration: Uint8Array;

  /**
   * @generated from field: uint64 configuration_index = 8;
   */
  configurationIndex: bigint;

  /**
   * @generated from field: int64 size = 9;
   */
  size: bigint;

  /**
   * @generated from field: bytes data = 10;
   */
  data: Uint8Array;
};

/**
 * Describes the message transport.v1.InstallSnapshotRequest.
 * Use `create(InstallSnapshotRequestSchema)` to create a new message.
 */
export const InstallSnapshotRequestSchema: GenMessage<InstallSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 8);

/**
 * @generated from message transport.v1.InstallSnapshotResponse
 */
export type InstallSnapshotResponse = Message<"transport.v1.InstallSnapshotResponse"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: bool success = 3;
   */
  success: boolean;
};

/**
 * Describes the message transport.v1.InstallSnapshotResponse.
 * Use `create(InstallSnapshotResponseSchema)` to create a new message.
 */
export const InstallSnapshotResponseSchema: GenMessage<InstallSnapshotResponse> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 9);

/**
 * @generated from message transport.v1.RequestPreVoteRequest
 */
export type RequestPreVoteRequest = Message<"transport.v1.RequestPreVoteRequest"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: uint64 last_log_index = 3;
   */
  lastLogIndex: bigint;

  /**
   * @generated from field: uint64 last_log_term = 4;
   */
  lastLogTerm: bigint;
};

/**
 * Describes the message transport.v1.RequestPreVoteRequest.
 * Use `create(RequestPreVoteRequestSchema)` to create a new message.
 */
export const RequestPreVoteRequestSchema: GenMessage<RequestPreVoteRequest> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 10);

/**
 * @generated from message transport.v1.RequestPreVoteResponse
 */
export type RequestPreVoteResponse = Message<"transport.v1.RequestPreVoteResponse"> & {
  /**
   * @generated from field: transport.v1.RPCHeader rpc_header = 1;
   */
  rpcHeader?: RPCHeader;

  /**
   * @generated from field: uint64 term = 2;
   */
  term: bigint;

  /**
   * @generated from field: bool granted = 3;
   */
  granted: boolean;
};

/**
 * Describes the message transport.v1.RequestPreVoteResponse.
 * Use `create(RequestPreVoteResponseSchema)` to create a new message.
 */
export const RequestPreVoteResponseSchema: GenMessage<RequestPreVoteResponse> = /*@__PURE__*/
  messageDesc(file_transport_v1_transport, 11);

/**
 * @generated from service transport.v1.RaftTransport
 */
export const RaftTransport: GenService<{
  /**
   * AppendEntriesPipeline opens an AppendEntries message stream.
   *
   * @generated from rpc transport.v1.RaftTransport.AppendEntriesPipeline
   */
  appendEntriesPipeline: {
    methodKind: "bidi_streaming";
    input: typeof AppendEntriesRequestSchema;
    output: typeof AppendEntriesResponseSchema;
  },
  /**
   * AppendEntries performs a single append entries request / response.
   *
   * @generated from rpc transport.v1.RaftTransport.AppendEntries
   */
  appendEntries: {
    methodKind: "unary";
    input: typeof AppendEntriesRequestSchema;
    output: typeof AppendEntriesResponseSchema;
  },
  /**
   * RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
   *
   * @generated from rpc transport.v1.RaftTransport.RequestVote
   */
  requestVote: {
    methodKind: "unary";
    input: typeof RequestVoteRequestSchema;
    output: typeof RequestVoteResponseSchema;
  },
  /**
   * TimeoutNow is used to start a leadership transfer to the target node.
   *
   * @generated from rpc transport.v1.RaftTransport.TimeoutNow
   */
  timeoutNow: {
    methodKind: "unary";
    input: typeof TimeoutNowRequestSchema;
    output: typeof TimeoutNowResponseSchema;
  },
  /**
   * InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
   *
   * @generated from rpc transport.v1.RaftTransport.InstallSnapshot
   */
  installSnapshot: {
    methodKind: "client_streaming";
    input: typeof InstallSnapshotRequestSchema;
    output: typeof InstallSnapshotResponseSchema;
  },
  /**
   * RequestPreVote is the command used by a candidate to ask a Raft peer for a vote in an election.
   *
   * @generated from rpc transport.v1.RaftTransport.RequestPreVote
   */
  requestPreVote: {
    methodKind: "unary";
    input: typeof RequestPreVoteRequestSchema;
    output: typeof RequestPreVoteResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_transport_v1_transport, 0);

