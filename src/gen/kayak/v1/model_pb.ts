// @generated by protoc-gen-es v2.3.0 with parameter "target=ts"
// @generated from file kayak/v1/model.proto (package kayak.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file kayak/v1/model.proto.
 */
export const file_kayak_v1_model: GenFile = /*@__PURE__*/
  fileDesc("ChRrYXlhay92MS9tb2RlbC5wcm90bxIIa2F5YWsudjEicQoGU3RyZWFtEgwKBG5hbWUYASABKAkSFwoPcGFydGl0aW9uX2NvdW50GAIgASgDEgsKA3R0bBgDIAEoAxIpCgVzdGF0cxgEIAEoCzIVLmtheWFrLnYxLlN0cmVhbVN0YXRzSACIAQFCCAoGX3N0YXRzIkQKC1N0cmVhbVN0YXRzEhQKDHJlY29yZF9jb3VudBgBIAEoAxIfCgZncm91cHMYAiADKAsyDy5rYXlhay52MS5Hcm91cCKWAQoFR3JvdXASDAoEbmFtZRgBIAEoCRJEChNwYXJ0aXRpb25fcG9zaXRpb25zGAIgAygLMicua2F5YWsudjEuR3JvdXAuUGFydGl0aW9uUG9zaXRpb25zRW50cnkaOQoXUGFydGl0aW9uUG9zaXRpb25zRW50cnkSCwoDa2V5GAEgASgDEg0KBXZhbHVlGAIgASgJOgI4ASJ4ChNQYXJ0aXRpb25Bc3NpZ25tZW50EhMKC3N0cmVhbV9uYW1lGAEgASgJEhIKCmdyb3VwX25hbWUYAiABKAkSEQoJcGFydGl0aW9uGAMgASgDEhEKCXdvcmtlcl9pZBgEIAEoCRISCgpleHBpcmVzX2F0GAUgASgDIoQBCgZXb3JrZXISEwoLc3RyZWFtX25hbWUYASABKAkSEgoKZ3JvdXBfbmFtZRgCIAEoCRIKCgJpZBgDIAEoCRIcChRwYXJ0aXRpb25fYXNzaWdubWVudBgEIAEoAxIQCghwb3NpdGlvbhgFIAEoCRIVCg1sZWFzZV9leHBpcmVzGAYgASgDIsoBCgZSZWNvcmQSEwoLc3RyZWFtX25hbWUYASABKAkSEQoJcGFydGl0aW9uGAIgASgDEgoKAmlkGAMgASgMEhMKC2ludGVybmFsX2lkGAQgASgJEi4KB2hlYWRlcnMYBSADKAsyHS5rYXlhay52MS5SZWNvcmQuSGVhZGVyc0VudHJ5EhcKB3BheWxvYWQYBiABKAxCBrpIA8gBARouCgxIZWFkZXJzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUKNAQoMY29tLmtheWFrLnYxQgpNb2RlbFByb3RvUAFaMGdpdGh1Yi5jb20vYmluYXJ5bWF0dC9rYXlhay9nZW4va2F5YWsvdjE7a2F5YWt2MaICA0tYWKoCCEtheWFrLlYxygIIS2F5YWtcVjHiAhRLYXlha1xWMVxHUEJNZXRhZGF0YeoCCUtheWFrOjpWMWIGcHJvdG8z", [file_buf_validate_validate]);

/**
 * @generated from message kayak.v1.Stream
 */
export type Stream = Message<"kayak.v1.Stream"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int64 partition_count = 2;
   */
  partitionCount: bigint;

  /**
   * @generated from field: int64 ttl = 3;
   */
  ttl: bigint;

  /**
   * @generated from field: optional kayak.v1.StreamStats stats = 4;
   */
  stats?: StreamStats;
};

/**
 * Describes the message kayak.v1.Stream.
 * Use `create(StreamSchema)` to create a new message.
 */
export const StreamSchema: GenMessage<Stream> = /*@__PURE__*/
  messageDesc(file_kayak_v1_model, 0);

/**
 * @generated from message kayak.v1.StreamStats
 */
export type StreamStats = Message<"kayak.v1.StreamStats"> & {
  /**
   * @generated from field: int64 record_count = 1;
   */
  recordCount: bigint;

  /**
   * @generated from field: repeated kayak.v1.Group groups = 2;
   */
  groups: Group[];
};

/**
 * Describes the message kayak.v1.StreamStats.
 * Use `create(StreamStatsSchema)` to create a new message.
 */
export const StreamStatsSchema: GenMessage<StreamStats> = /*@__PURE__*/
  messageDesc(file_kayak_v1_model, 1);

/**
 * @generated from message kayak.v1.Group
 */
export type Group = Message<"kayak.v1.Group"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: map<int64, string> partition_positions = 2;
   */
  partitionPositions: { [key: string]: string };
};

/**
 * Describes the message kayak.v1.Group.
 * Use `create(GroupSchema)` to create a new message.
 */
export const GroupSchema: GenMessage<Group> = /*@__PURE__*/
  messageDesc(file_kayak_v1_model, 2);

/**
 * @generated from message kayak.v1.PartitionAssignment
 */
export type PartitionAssignment = Message<"kayak.v1.PartitionAssignment"> & {
  /**
   * @generated from field: string stream_name = 1;
   */
  streamName: string;

  /**
   * @generated from field: string group_name = 2;
   */
  groupName: string;

  /**
   * @generated from field: int64 partition = 3;
   */
  partition: bigint;

  /**
   * @generated from field: string worker_id = 4;
   */
  workerId: string;

  /**
   * @generated from field: int64 expires_at = 5;
   */
  expiresAt: bigint;
};

/**
 * Describes the message kayak.v1.PartitionAssignment.
 * Use `create(PartitionAssignmentSchema)` to create a new message.
 */
export const PartitionAssignmentSchema: GenMessage<PartitionAssignment> = /*@__PURE__*/
  messageDesc(file_kayak_v1_model, 3);

/**
 * @generated from message kayak.v1.Worker
 */
export type Worker = Message<"kayak.v1.Worker"> & {
  /**
   * @generated from field: string stream_name = 1;
   */
  streamName: string;

  /**
   * @generated from field: string group_name = 2;
   */
  groupName: string;

  /**
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * @generated from field: int64 partition_assignment = 4;
   */
  partitionAssignment: bigint;

  /**
   * @generated from field: string position = 5;
   */
  position: string;

  /**
   * @generated from field: int64 lease_expires = 6;
   */
  leaseExpires: bigint;
};

/**
 * Describes the message kayak.v1.Worker.
 * Use `create(WorkerSchema)` to create a new message.
 */
export const WorkerSchema: GenMessage<Worker> = /*@__PURE__*/
  messageDesc(file_kayak_v1_model, 4);

/**
 * @generated from message kayak.v1.Record
 */
export type Record = Message<"kayak.v1.Record"> & {
  /**
   * @generated from field: string stream_name = 1;
   */
  streamName: string;

  /**
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;

  /**
   * id is used to hashed and used for partition assignment, can be set by client.
   *
   * @generated from field: bytes id = 3;
   */
  id: Uint8Array;

  /**
   * internal id is used as identifier in partition stream
   *
   * @generated from field: string internal_id = 4;
   */
  internalId: string;

  /**
   * @generated from field: map<string, string> headers = 5;
   */
  headers: { [key: string]: string };

  /**
   * @generated from field: bytes payload = 6;
   */
  payload: Uint8Array;
};

/**
 * Describes the message kayak.v1.Record.
 * Use `create(RecordSchema)` to create a new message.
 */
export const RecordSchema: GenMessage<Record> = /*@__PURE__*/
  messageDesc(file_kayak_v1_model, 5);

