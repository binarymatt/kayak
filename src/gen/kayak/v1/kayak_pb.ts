// @generated by protoc-gen-es v2.3.0 with parameter "target=ts"
// @generated from file kayak/v1/kayak.proto (package kayak.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { Record, Stream, Worker } from "./model_pb";
import { file_kayak_v1_model } from "./model_pb";
import type { RaftCommand } from "./raft_pb";
import { file_kayak_v1_raft } from "./raft_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file kayak/v1/kayak.proto.
 */
export const file_kayak_v1_kayak: GenFile = /*@__PURE__*/
  fileDesc("ChRrYXlhay92MS9rYXlhay5wcm90bxIIa2F5YWsudjEiZAoRUHV0UmVjb3Jkc1JlcXVlc3QSEwoLc3RyZWFtX25hbWUYASABKAkSIQoHcmVjb3JkcxgCIAMoCzIQLmtheWFrLnYxLlJlY29yZBIXCg9pZGVtcG90ZW5jeV9rZXkYAyABKAkiXAoRR2V0UmVjb3Jkc1JlcXVlc3QSEwoLc3RyZWFtX25hbWUYASABKAkSEQoJcGFydGl0aW9uGAIgASgDEhAKCHN0YXJ0X2lkGAMgASgJEg0KBWxpbWl0GAQgASgDIjcKEkdldFJlY29yZHNSZXNwb25zZRIhCgdyZWNvcmRzGAEgAygLMhAua2F5YWsudjEuUmVjb3JkIlsKE0ZldGNoUmVjb3Jkc1JlcXVlc3QSEwoLc3RyZWFtX25hbWUYASABKAkSIAoGd29ya2VyGAIgASgLMhAua2F5YWsudjEuV29ya2VyEg0KBWxpbWl0GAQgASgDIjkKFEZldGNoUmVjb3Jkc1Jlc3BvbnNlEiEKB3JlY29yZHMYASADKAsyEC5rYXlhay52MS5SZWNvcmQiWQoTQ29tbWl0UmVjb3JkUmVxdWVzdBIgCgZ3b3JrZXIYASABKAsyEC5rYXlhay52MS5Xb3JrZXISIAoGcmVjb3JkGAIgASgLMhAua2F5YWsudjEuUmVjb3JkIkcKFVJlZ2lzdGVyV29ya2VyUmVxdWVzdBITCgtzdHJlYW1fbmFtZRgBIAEoCRINCgVncm91cBgCIAEoCRIKCgJpZBgDIAEoCSI6ChZSZWdpc3RlcldvcmtlclJlc3BvbnNlEiAKBndvcmtlchgBIAEoCzIQLmtheWFrLnYxLldvcmtlciI7ChdEZXJlZ2lzdGVyV29ya2VyUmVxdWVzdBIgCgZ3b3JrZXIYASABKAsyEC5rYXlhay52MS5Xb3JrZXIiSQoTQ3JlYXRlU3RyZWFtUmVxdWVzdBIMCgRuYW1lGAEgASgJEhcKD3BhcnRpdGlvbl9jb3VudBgCIAEoAxILCgN0dGwYAyABKAMiKAoQR2V0U3RyZWFtUmVxdWVzdBIUCgRuYW1lGAEgASgJQga6SAPIAQEiNQoRR2V0U3RyZWFtUmVzcG9uc2USIAoGc3RyZWFtGAEgASgLMhAua2F5YWsudjEuU3RyZWFtIhMKEUdldFN0cmVhbXNSZXF1ZXN0IjcKEkdldFN0cmVhbXNSZXNwb25zZRIhCgdzdHJlYW1zGAEgAygLMhAua2F5YWsudjEuU3RyZWFtIjYKDEFwcGx5UmVxdWVzdBImCgdjb21tYW5kGAEgASgLMhUua2F5YWsudjEuUmFmdENvbW1hbmQiDwoNQXBwbHlSZXNwb25zZSIrChNEZWxldGVTdHJlYW1SZXF1ZXN0EhQKBG5hbWUYASABKAlCBrpIA8gBATLBBgoMS2F5YWtTZXJ2aWNlEkMKClB1dFJlY29yZHMSGy5rYXlhay52MS5QdXRSZWNvcmRzUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkkKCkdldFJlY29yZHMSGy5rYXlhay52MS5HZXRSZWNvcmRzUmVxdWVzdBocLmtheWFrLnYxLkdldFJlY29yZHNSZXNwb25zZSIAEk8KDEZldGNoUmVjb3JkcxIdLmtheWFrLnYxLkZldGNoUmVjb3Jkc1JlcXVlc3QaHi5rYXlhay52MS5GZXRjaFJlY29yZHNSZXNwb25zZSIAEkcKDENvbW1pdFJlY29yZBIdLmtheWFrLnYxLkNvbW1pdFJlY29yZFJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJVCg5SZWdpc3RlcldvcmtlchIfLmtheWFrLnYxLlJlZ2lzdGVyV29ya2VyUmVxdWVzdBogLmtheWFrLnYxLlJlZ2lzdGVyV29ya2VyUmVzcG9uc2UiABJPChBEZXJlZ2lzdGVyV29ya2VyEiEua2F5YWsudjEuRGVyZWdpc3RlcldvcmtlclJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJHCgxDcmVhdGVTdHJlYW0SHS5rYXlhay52MS5DcmVhdGVTdHJlYW1SZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASRgoJR2V0U3RyZWFtEhoua2F5YWsudjEuR2V0U3RyZWFtUmVxdWVzdBobLmtheWFrLnYxLkdldFN0cmVhbVJlc3BvbnNlIgASSQoKR2V0U3RyZWFtcxIbLmtheWFrLnYxLkdldFN0cmVhbXNSZXF1ZXN0Ghwua2F5YWsudjEuR2V0U3RyZWFtc1Jlc3BvbnNlIgASRwoMRGVsZXRlU3RyZWFtEh0ua2F5YWsudjEuRGVsZXRlU3RyZWFtUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjoKBUFwcGx5EhYua2F5YWsudjEuQXBwbHlSZXF1ZXN0Ghcua2F5YWsudjEuQXBwbHlSZXNwb25zZSIAQo0BCgxjb20ua2F5YWsudjFCCktheWFrUHJvdG9QAVowZ2l0aHViLmNvbS9iaW5hcnltYXR0L2theWFrL2dlbi9rYXlhay92MTtrYXlha3YxogIDS1hYqgIIS2F5YWsuVjHKAghLYXlha1xWMeICFEtheWFrXFYxXEdQQk1ldGFkYXRh6gIJS2F5YWs6OlYxYgZwcm90bzM", [file_buf_validate_validate, file_google_protobuf_empty, file_kayak_v1_model, file_kayak_v1_raft]);

/**
 * @generated from message kayak.v1.PutRecordsRequest
 */
export type PutRecordsRequest = Message<"kayak.v1.PutRecordsRequest"> & {
  /**
   * @generated from field: string stream_name = 1;
   */
  streamName: string;

  /**
   * @generated from field: repeated kayak.v1.Record records = 2;
   */
  records: Record[];

  /**
   * @generated from field: string idempotency_key = 3;
   */
  idempotencyKey: string;
};

/**
 * Describes the message kayak.v1.PutRecordsRequest.
 * Use `create(PutRecordsRequestSchema)` to create a new message.
 */
export const PutRecordsRequestSchema: GenMessage<PutRecordsRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 0);

/**
 * @generated from message kayak.v1.GetRecordsRequest
 */
export type GetRecordsRequest = Message<"kayak.v1.GetRecordsRequest"> & {
  /**
   * @generated from field: string stream_name = 1;
   */
  streamName: string;

  /**
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;

  /**
   * @generated from field: string start_id = 3;
   */
  startId: string;

  /**
   * @generated from field: int64 limit = 4;
   */
  limit: bigint;
};

/**
 * Describes the message kayak.v1.GetRecordsRequest.
 * Use `create(GetRecordsRequestSchema)` to create a new message.
 */
export const GetRecordsRequestSchema: GenMessage<GetRecordsRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 1);

/**
 * @generated from message kayak.v1.GetRecordsResponse
 */
export type GetRecordsResponse = Message<"kayak.v1.GetRecordsResponse"> & {
  /**
   * @generated from field: repeated kayak.v1.Record records = 1;
   */
  records: Record[];
};

/**
 * Describes the message kayak.v1.GetRecordsResponse.
 * Use `create(GetRecordsResponseSchema)` to create a new message.
 */
export const GetRecordsResponseSchema: GenMessage<GetRecordsResponse> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 2);

/**
 * @generated from message kayak.v1.FetchRecordsRequest
 */
export type FetchRecordsRequest = Message<"kayak.v1.FetchRecordsRequest"> & {
  /**
   * @generated from field: string stream_name = 1;
   */
  streamName: string;

  /**
   * @generated from field: kayak.v1.Worker worker = 2;
   */
  worker?: Worker;

  /**
   * @generated from field: int64 limit = 4;
   */
  limit: bigint;
};

/**
 * Describes the message kayak.v1.FetchRecordsRequest.
 * Use `create(FetchRecordsRequestSchema)` to create a new message.
 */
export const FetchRecordsRequestSchema: GenMessage<FetchRecordsRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 3);

/**
 * @generated from message kayak.v1.FetchRecordsResponse
 */
export type FetchRecordsResponse = Message<"kayak.v1.FetchRecordsResponse"> & {
  /**
   * @generated from field: repeated kayak.v1.Record records = 1;
   */
  records: Record[];
};

/**
 * Describes the message kayak.v1.FetchRecordsResponse.
 * Use `create(FetchRecordsResponseSchema)` to create a new message.
 */
export const FetchRecordsResponseSchema: GenMessage<FetchRecordsResponse> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 4);

/**
 * @generated from message kayak.v1.CommitRecordRequest
 */
export type CommitRecordRequest = Message<"kayak.v1.CommitRecordRequest"> & {
  /**
   * @generated from field: kayak.v1.Worker worker = 1;
   */
  worker?: Worker;

  /**
   * @generated from field: kayak.v1.Record record = 2;
   */
  record?: Record;
};

/**
 * Describes the message kayak.v1.CommitRecordRequest.
 * Use `create(CommitRecordRequestSchema)` to create a new message.
 */
export const CommitRecordRequestSchema: GenMessage<CommitRecordRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 5);

/**
 * @generated from message kayak.v1.RegisterWorkerRequest
 */
export type RegisterWorkerRequest = Message<"kayak.v1.RegisterWorkerRequest"> & {
  /**
   * @generated from field: string stream_name = 1;
   */
  streamName: string;

  /**
   * @generated from field: string group = 2;
   */
  group: string;

  /**
   * @generated from field: string id = 3;
   */
  id: string;
};

/**
 * Describes the message kayak.v1.RegisterWorkerRequest.
 * Use `create(RegisterWorkerRequestSchema)` to create a new message.
 */
export const RegisterWorkerRequestSchema: GenMessage<RegisterWorkerRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 6);

/**
 * @generated from message kayak.v1.RegisterWorkerResponse
 */
export type RegisterWorkerResponse = Message<"kayak.v1.RegisterWorkerResponse"> & {
  /**
   * @generated from field: kayak.v1.Worker worker = 1;
   */
  worker?: Worker;
};

/**
 * Describes the message kayak.v1.RegisterWorkerResponse.
 * Use `create(RegisterWorkerResponseSchema)` to create a new message.
 */
export const RegisterWorkerResponseSchema: GenMessage<RegisterWorkerResponse> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 7);

/**
 * @generated from message kayak.v1.DeregisterWorkerRequest
 */
export type DeregisterWorkerRequest = Message<"kayak.v1.DeregisterWorkerRequest"> & {
  /**
   * @generated from field: kayak.v1.Worker worker = 1;
   */
  worker?: Worker;
};

/**
 * Describes the message kayak.v1.DeregisterWorkerRequest.
 * Use `create(DeregisterWorkerRequestSchema)` to create a new message.
 */
export const DeregisterWorkerRequestSchema: GenMessage<DeregisterWorkerRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 8);

/**
 * @generated from message kayak.v1.CreateStreamRequest
 */
export type CreateStreamRequest = Message<"kayak.v1.CreateStreamRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int64 partition_count = 2;
   */
  partitionCount: bigint;

  /**
   * @generated from field: int64 ttl = 3;
   */
  ttl: bigint;
};

/**
 * Describes the message kayak.v1.CreateStreamRequest.
 * Use `create(CreateStreamRequestSchema)` to create a new message.
 */
export const CreateStreamRequestSchema: GenMessage<CreateStreamRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 9);

/**
 * @generated from message kayak.v1.GetStreamRequest
 */
export type GetStreamRequest = Message<"kayak.v1.GetStreamRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message kayak.v1.GetStreamRequest.
 * Use `create(GetStreamRequestSchema)` to create a new message.
 */
export const GetStreamRequestSchema: GenMessage<GetStreamRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 10);

/**
 * @generated from message kayak.v1.GetStreamResponse
 */
export type GetStreamResponse = Message<"kayak.v1.GetStreamResponse"> & {
  /**
   * @generated from field: kayak.v1.Stream stream = 1;
   */
  stream?: Stream;
};

/**
 * Describes the message kayak.v1.GetStreamResponse.
 * Use `create(GetStreamResponseSchema)` to create a new message.
 */
export const GetStreamResponseSchema: GenMessage<GetStreamResponse> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 11);

/**
 * @generated from message kayak.v1.GetStreamsRequest
 */
export type GetStreamsRequest = Message<"kayak.v1.GetStreamsRequest"> & {
};

/**
 * Describes the message kayak.v1.GetStreamsRequest.
 * Use `create(GetStreamsRequestSchema)` to create a new message.
 */
export const GetStreamsRequestSchema: GenMessage<GetStreamsRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 12);

/**
 * @generated from message kayak.v1.GetStreamsResponse
 */
export type GetStreamsResponse = Message<"kayak.v1.GetStreamsResponse"> & {
  /**
   * @generated from field: repeated kayak.v1.Stream streams = 1;
   */
  streams: Stream[];
};

/**
 * Describes the message kayak.v1.GetStreamsResponse.
 * Use `create(GetStreamsResponseSchema)` to create a new message.
 */
export const GetStreamsResponseSchema: GenMessage<GetStreamsResponse> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 13);

/**
 * @generated from message kayak.v1.ApplyRequest
 */
export type ApplyRequest = Message<"kayak.v1.ApplyRequest"> & {
  /**
   * @generated from field: kayak.v1.RaftCommand command = 1;
   */
  command?: RaftCommand;
};

/**
 * Describes the message kayak.v1.ApplyRequest.
 * Use `create(ApplyRequestSchema)` to create a new message.
 */
export const ApplyRequestSchema: GenMessage<ApplyRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 14);

/**
 * @generated from message kayak.v1.ApplyResponse
 */
export type ApplyResponse = Message<"kayak.v1.ApplyResponse"> & {
};

/**
 * Describes the message kayak.v1.ApplyResponse.
 * Use `create(ApplyResponseSchema)` to create a new message.
 */
export const ApplyResponseSchema: GenMessage<ApplyResponse> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 15);

/**
 * @generated from message kayak.v1.DeleteStreamRequest
 */
export type DeleteStreamRequest = Message<"kayak.v1.DeleteStreamRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message kayak.v1.DeleteStreamRequest.
 * Use `create(DeleteStreamRequestSchema)` to create a new message.
 */
export const DeleteStreamRequestSchema: GenMessage<DeleteStreamRequest> = /*@__PURE__*/
  messageDesc(file_kayak_v1_kayak, 16);

/**
 * @generated from service kayak.v1.KayakService
 */
export const KayakService: GenService<{
  /**
   * Record Operations
   * PutRecords adds records to the stream
   *
   * @generated from rpc kayak.v1.KayakService.PutRecords
   */
  putRecords: {
    methodKind: "unary";
    input: typeof PutRecordsRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetRecords retrieves from a stream
   *
   * @generated from rpc kayak.v1.KayakService.GetRecords
   */
  getRecords: {
    methodKind: "unary";
    input: typeof GetRecordsRequestSchema;
    output: typeof GetRecordsResponseSchema;
  },
  /**
   * FetchRecords retrieves from a stream for a group worker
   *
   * @generated from rpc kayak.v1.KayakService.FetchRecords
   */
  fetchRecords: {
    methodKind: "unary";
    input: typeof FetchRecordsRequestSchema;
    output: typeof FetchRecordsResponseSchema;
  },
  /**
   * CommitRecord commits the position of a worker in the stream.
   *
   * @generated from rpc kayak.v1.KayakService.CommitRecord
   */
  commitRecord: {
    methodKind: "unary";
    input: typeof CommitRecordRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Worker Operations
   *
   * @generated from rpc kayak.v1.KayakService.RegisterWorker
   */
  registerWorker: {
    methodKind: "unary";
    input: typeof RegisterWorkerRequestSchema;
    output: typeof RegisterWorkerResponseSchema;
  },
  /**
   * @generated from rpc kayak.v1.KayakService.DeregisterWorker
   */
  deregisterWorker: {
    methodKind: "unary";
    input: typeof DeregisterWorkerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Stream Operations
   *
   * @generated from rpc kayak.v1.KayakService.CreateStream
   */
  createStream: {
    methodKind: "unary";
    input: typeof CreateStreamRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc kayak.v1.KayakService.GetStream
   */
  getStream: {
    methodKind: "unary";
    input: typeof GetStreamRequestSchema;
    output: typeof GetStreamResponseSchema;
  },
  /**
   * @generated from rpc kayak.v1.KayakService.GetStreams
   */
  getStreams: {
    methodKind: "unary";
    input: typeof GetStreamsRequestSchema;
    output: typeof GetStreamsResponseSchema;
  },
  /**
   * @generated from rpc kayak.v1.KayakService.DeleteStream
   */
  deleteStream: {
    methodKind: "unary";
    input: typeof DeleteStreamRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Raft Specific
   *
   * @generated from rpc kayak.v1.KayakService.Apply
   */
  apply: {
    methodKind: "unary";
    input: typeof ApplyRequestSchema;
    output: typeof ApplyResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_kayak_v1_kayak, 0);

