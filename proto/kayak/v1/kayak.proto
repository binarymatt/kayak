syntax = "proto3";

package kayak.v1;

import "buf/validate/validate.proto";
import "google/protobuf/empty.proto";
// import "google/protobuf/struct.proto";
// import "google/protobuf/timestamp.proto";
import "kayak/v1/model.proto";
import "kayak/v1/raft.proto";

option go_package = "github.com/binarymatt/kayak/gen/kayak/v1;kayakv1";

service KayakService {
  // Record Operations
  // PutRecords adds records to the stream
  rpc PutRecords(PutRecordsRequest) returns (google.protobuf.Empty) {}
  // GetRecords retrieves from a stream
  rpc GetRecords(GetRecordsRequest) returns (GetRecordsResponse) {}
  // FetchRecords retrieves from a stream for a group worker
  rpc FetchRecords(FetchRecordsRequest) returns (FetchRecordsResponse) {}
  // CommitRecord commits the position of a worker in the stream.
  rpc CommitRecord(CommitRecordRequest) returns (google.protobuf.Empty) {}

  // Worker Operations
  rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse) {}
  rpc DeregisterWorker(DeregisterWorkerRequest) returns (google.protobuf.Empty) {}
  rpc RenewRegistration(RenewRegistrationRequest) returns (google.protobuf.Empty) {}

  // Stream Operations
  rpc CreateStream(CreateStreamRequest) returns (google.protobuf.Empty) {}
  rpc GetStream(GetStreamRequest) returns (GetStreamResponse) {}
  rpc GetStreams(GetStreamsRequest) returns (GetStreamsResponse) {}
  rpc DeleteStream(DeleteStreamRequest) returns (google.protobuf.Empty) {}

  // Raft Specific
  rpc Apply(ApplyRequest) returns (ApplyResponse) {}
}

message PutRecordsRequest {
  string stream_name = 1;
  // all records will be part of the same stream.
  repeated Record records = 2;
  string idempotency_key = 3;
}
message GetRecordsRequest {
  string stream_name = 1;
  int64 partition = 2;
  string start_id = 3;
  int64 limit = 4;
}
message GetRecordsResponse {
  repeated Record records = 1;
}
message FetchRecordsRequest {
  string stream_name = 1;
  Worker worker = 2;
  int64 limit = 4;
}
message FetchRecordsResponse {
  repeated Record records = 1;
}
message CommitRecordRequest {
  Worker worker = 1;
  Record record = 2;
}
message RegisterWorkerRequest {
  string stream_name = 1;
  string group = 2;
  string id = 3;
}
message RegisterWorkerResponse {
  Worker worker = 1;
}
message RenewRegistrationRequest {
  Worker worker = 1 [(buf.validate.field).required = true];
}
message DeregisterWorkerRequest {
  Worker worker = 1;
}
message CreateStreamRequest {
  string name = 1;
  int64 partition_count = 2;
  int64 ttl = 3;
}

message GetStreamRequest {
  string name = 1 [(buf.validate.field).required = true];
  optional bool include_stats = 2;
}
message GetStreamResponse {
  Stream stream = 1;
}
message GetStreamsRequest {}
message GetStreamsResponse {
  repeated Stream streams = 1;
}

message ApplyRequest {
  RaftCommand command = 1;
}

message ApplyResponse {}

message DeleteStreamRequest {
  string name = 1 [(buf.validate.field).required = true];
}
