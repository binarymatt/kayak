// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kayak/v1/kayak.proto

package kayakv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PutRecordsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StreamName     string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Records        []*Record              `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	IdempotencyKey string                 `protobuf:"bytes,3,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PutRecordsRequest) Reset() {
	*x = PutRecordsRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRecordsRequest) ProtoMessage() {}

func (x *PutRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRecordsRequest.ProtoReflect.Descriptor instead.
func (*PutRecordsRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{0}
}

func (x *PutRecordsRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *PutRecordsRequest) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *PutRecordsRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

type GetRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamName    string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Partition     int64                  `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	StartId       string                 `protobuf:"bytes,3,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	Limit         int64                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsRequest) Reset() {
	*x = GetRecordsRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsRequest) ProtoMessage() {}

func (x *GetRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetRecordsRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecordsRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *GetRecordsRequest) GetPartition() int64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *GetRecordsRequest) GetStartId() string {
	if x != nil {
		return x.StartId
	}
	return ""
}

func (x *GetRecordsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRecordsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*Record              `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsResponse) Reset() {
	*x = GetRecordsResponse{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsResponse) ProtoMessage() {}

func (x *GetRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetRecordsResponse) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecordsResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type FetchRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamName    string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Worker        *Worker                `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	Limit         int64                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchRecordsRequest) Reset() {
	*x = FetchRecordsRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRecordsRequest) ProtoMessage() {}

func (x *FetchRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRecordsRequest.ProtoReflect.Descriptor instead.
func (*FetchRecordsRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{3}
}

func (x *FetchRecordsRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *FetchRecordsRequest) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *FetchRecordsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type FetchRecordsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*Record              `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchRecordsResponse) Reset() {
	*x = FetchRecordsResponse{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRecordsResponse) ProtoMessage() {}

func (x *FetchRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRecordsResponse.ProtoReflect.Descriptor instead.
func (*FetchRecordsResponse) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{4}
}

func (x *FetchRecordsResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type CommitRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *Worker                `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	Record        *Record                `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitRecordRequest) Reset() {
	*x = CommitRecordRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRecordRequest) ProtoMessage() {}

func (x *CommitRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRecordRequest.ProtoReflect.Descriptor instead.
func (*CommitRecordRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{5}
}

func (x *CommitRecordRequest) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *CommitRecordRequest) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type RegisterWorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamName    string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterWorkerRequest) Reset() {
	*x = RegisterWorkerRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerRequest) ProtoMessage() {}

func (x *RegisterWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerRequest.ProtoReflect.Descriptor instead.
func (*RegisterWorkerRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterWorkerRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *RegisterWorkerRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RegisterWorkerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegisterWorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *Worker                `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterWorkerResponse) Reset() {
	*x = RegisterWorkerResponse{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerResponse) ProtoMessage() {}

func (x *RegisterWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerResponse.ProtoReflect.Descriptor instead.
func (*RegisterWorkerResponse) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterWorkerResponse) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

type DeregisterWorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *Worker                `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeregisterWorkerRequest) Reset() {
	*x = DeregisterWorkerRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterWorkerRequest) ProtoMessage() {}

func (x *DeregisterWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterWorkerRequest.ProtoReflect.Descriptor instead.
func (*DeregisterWorkerRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{8}
}

func (x *DeregisterWorkerRequest) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

type CreateStreamRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PartitionCount int64                  `protobuf:"varint,2,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	Ttl            int64                  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{9}
}

func (x *CreateStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStreamRequest) GetPartitionCount() int64 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *CreateStreamRequest) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type GetStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{10}
}

func (x *GetStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        *Stream                `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamResponse) Reset() {
	*x = GetStreamResponse{}
	mi := &file_kayak_v1_kayak_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamResponse) ProtoMessage() {}

func (x *GetStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_kayak_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamResponse.ProtoReflect.Descriptor instead.
func (*GetStreamResponse) Descriptor() ([]byte, []int) {
	return file_kayak_v1_kayak_proto_rawDescGZIP(), []int{11}
}

func (x *GetStreamResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

var File_kayak_v1_kayak_proto protoreflect.FileDescriptor

const file_kayak_v1_kayak_proto_rawDesc = "" +
	"\n" +
	"\x14kayak/v1/kayak.proto\x12\bkayak.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x14kayak/v1/model.proto\"\x89\x01\n" +
	"\x11PutRecordsRequest\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12*\n" +
	"\arecords\x18\x02 \x03(\v2\x10.kayak.v1.RecordR\arecords\x12'\n" +
	"\x0fidempotency_key\x18\x03 \x01(\tR\x0eidempotencyKey\"\x83\x01\n" +
	"\x11GetRecordsRequest\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\x03R\tpartition\x12\x19\n" +
	"\bstart_id\x18\x03 \x01(\tR\astartId\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x03R\x05limit\"@\n" +
	"\x12GetRecordsResponse\x12*\n" +
	"\arecords\x18\x01 \x03(\v2\x10.kayak.v1.RecordR\arecords\"v\n" +
	"\x13FetchRecordsRequest\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12(\n" +
	"\x06worker\x18\x02 \x01(\v2\x10.kayak.v1.WorkerR\x06worker\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x03R\x05limit\"B\n" +
	"\x14FetchRecordsResponse\x12*\n" +
	"\arecords\x18\x01 \x03(\v2\x10.kayak.v1.RecordR\arecords\"i\n" +
	"\x13CommitRecordRequest\x12(\n" +
	"\x06worker\x18\x01 \x01(\v2\x10.kayak.v1.WorkerR\x06worker\x12(\n" +
	"\x06record\x18\x02 \x01(\v2\x10.kayak.v1.RecordR\x06record\"^\n" +
	"\x15RegisterWorkerRequest\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\"B\n" +
	"\x16RegisterWorkerResponse\x12(\n" +
	"\x06worker\x18\x01 \x01(\v2\x10.kayak.v1.WorkerR\x06worker\"C\n" +
	"\x17DeregisterWorkerRequest\x12(\n" +
	"\x06worker\x18\x01 \x01(\v2\x10.kayak.v1.WorkerR\x06worker\"d\n" +
	"\x13CreateStreamRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12'\n" +
	"\x0fpartition_count\x18\x02 \x01(\x03R\x0epartitionCount\x12\x10\n" +
	"\x03ttl\x18\x03 \x01(\x03R\x03ttl\".\n" +
	"\x10GetStreamRequest\x12\x1a\n" +
	"\x04name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\"=\n" +
	"\x11GetStreamResponse\x12(\n" +
	"\x06stream\x18\x01 \x01(\v2\x10.kayak.v1.StreamR\x06stream2\xf1\x04\n" +
	"\fKayakService\x12C\n" +
	"\n" +
	"PutRecords\x12\x1b.kayak.v1.PutRecordsRequest\x1a\x16.google.protobuf.Empty\"\x00\x12I\n" +
	"\n" +
	"GetRecords\x12\x1b.kayak.v1.GetRecordsRequest\x1a\x1c.kayak.v1.GetRecordsResponse\"\x00\x12O\n" +
	"\fFetchRecords\x12\x1d.kayak.v1.FetchRecordsRequest\x1a\x1e.kayak.v1.FetchRecordsResponse\"\x00\x12G\n" +
	"\fCommitRecord\x12\x1d.kayak.v1.CommitRecordRequest\x1a\x16.google.protobuf.Empty\"\x00\x12U\n" +
	"\x0eRegisterWorker\x12\x1f.kayak.v1.RegisterWorkerRequest\x1a .kayak.v1.RegisterWorkerResponse\"\x00\x12O\n" +
	"\x10DeregisterWorker\x12!.kayak.v1.DeregisterWorkerRequest\x1a\x16.google.protobuf.Empty\"\x00\x12G\n" +
	"\fCreateStream\x12\x1d.kayak.v1.CreateStreamRequest\x1a\x16.google.protobuf.Empty\"\x00\x12F\n" +
	"\tGetStream\x12\x1a.kayak.v1.GetStreamRequest\x1a\x1b.kayak.v1.GetStreamResponse\"\x00B\x8d\x01\n" +
	"\fcom.kayak.v1B\n" +
	"KayakProtoP\x01Z0github.com/binarymatt/kayak/gen/kayak/v1;kayakv1\xa2\x02\x03KXX\xaa\x02\bKayak.V1\xca\x02\bKayak\\V1\xe2\x02\x14Kayak\\V1\\GPBMetadata\xea\x02\tKayak::V1b\x06proto3"

var (
	file_kayak_v1_kayak_proto_rawDescOnce sync.Once
	file_kayak_v1_kayak_proto_rawDescData []byte
)

func file_kayak_v1_kayak_proto_rawDescGZIP() []byte {
	file_kayak_v1_kayak_proto_rawDescOnce.Do(func() {
		file_kayak_v1_kayak_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kayak_v1_kayak_proto_rawDesc), len(file_kayak_v1_kayak_proto_rawDesc)))
	})
	return file_kayak_v1_kayak_proto_rawDescData
}

var file_kayak_v1_kayak_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kayak_v1_kayak_proto_goTypes = []any{
	(*PutRecordsRequest)(nil),       // 0: kayak.v1.PutRecordsRequest
	(*GetRecordsRequest)(nil),       // 1: kayak.v1.GetRecordsRequest
	(*GetRecordsResponse)(nil),      // 2: kayak.v1.GetRecordsResponse
	(*FetchRecordsRequest)(nil),     // 3: kayak.v1.FetchRecordsRequest
	(*FetchRecordsResponse)(nil),    // 4: kayak.v1.FetchRecordsResponse
	(*CommitRecordRequest)(nil),     // 5: kayak.v1.CommitRecordRequest
	(*RegisterWorkerRequest)(nil),   // 6: kayak.v1.RegisterWorkerRequest
	(*RegisterWorkerResponse)(nil),  // 7: kayak.v1.RegisterWorkerResponse
	(*DeregisterWorkerRequest)(nil), // 8: kayak.v1.DeregisterWorkerRequest
	(*CreateStreamRequest)(nil),     // 9: kayak.v1.CreateStreamRequest
	(*GetStreamRequest)(nil),        // 10: kayak.v1.GetStreamRequest
	(*GetStreamResponse)(nil),       // 11: kayak.v1.GetStreamResponse
	(*Record)(nil),                  // 12: kayak.v1.Record
	(*Worker)(nil),                  // 13: kayak.v1.Worker
	(*Stream)(nil),                  // 14: kayak.v1.Stream
	(*emptypb.Empty)(nil),           // 15: google.protobuf.Empty
}
var file_kayak_v1_kayak_proto_depIdxs = []int32{
	12, // 0: kayak.v1.PutRecordsRequest.records:type_name -> kayak.v1.Record
	12, // 1: kayak.v1.GetRecordsResponse.records:type_name -> kayak.v1.Record
	13, // 2: kayak.v1.FetchRecordsRequest.worker:type_name -> kayak.v1.Worker
	12, // 3: kayak.v1.FetchRecordsResponse.records:type_name -> kayak.v1.Record
	13, // 4: kayak.v1.CommitRecordRequest.worker:type_name -> kayak.v1.Worker
	12, // 5: kayak.v1.CommitRecordRequest.record:type_name -> kayak.v1.Record
	13, // 6: kayak.v1.RegisterWorkerResponse.worker:type_name -> kayak.v1.Worker
	13, // 7: kayak.v1.DeregisterWorkerRequest.worker:type_name -> kayak.v1.Worker
	14, // 8: kayak.v1.GetStreamResponse.stream:type_name -> kayak.v1.Stream
	0,  // 9: kayak.v1.KayakService.PutRecords:input_type -> kayak.v1.PutRecordsRequest
	1,  // 10: kayak.v1.KayakService.GetRecords:input_type -> kayak.v1.GetRecordsRequest
	3,  // 11: kayak.v1.KayakService.FetchRecords:input_type -> kayak.v1.FetchRecordsRequest
	5,  // 12: kayak.v1.KayakService.CommitRecord:input_type -> kayak.v1.CommitRecordRequest
	6,  // 13: kayak.v1.KayakService.RegisterWorker:input_type -> kayak.v1.RegisterWorkerRequest
	8,  // 14: kayak.v1.KayakService.DeregisterWorker:input_type -> kayak.v1.DeregisterWorkerRequest
	9,  // 15: kayak.v1.KayakService.CreateStream:input_type -> kayak.v1.CreateStreamRequest
	10, // 16: kayak.v1.KayakService.GetStream:input_type -> kayak.v1.GetStreamRequest
	15, // 17: kayak.v1.KayakService.PutRecords:output_type -> google.protobuf.Empty
	2,  // 18: kayak.v1.KayakService.GetRecords:output_type -> kayak.v1.GetRecordsResponse
	4,  // 19: kayak.v1.KayakService.FetchRecords:output_type -> kayak.v1.FetchRecordsResponse
	15, // 20: kayak.v1.KayakService.CommitRecord:output_type -> google.protobuf.Empty
	7,  // 21: kayak.v1.KayakService.RegisterWorker:output_type -> kayak.v1.RegisterWorkerResponse
	15, // 22: kayak.v1.KayakService.DeregisterWorker:output_type -> google.protobuf.Empty
	15, // 23: kayak.v1.KayakService.CreateStream:output_type -> google.protobuf.Empty
	11, // 24: kayak.v1.KayakService.GetStream:output_type -> kayak.v1.GetStreamResponse
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_kayak_v1_kayak_proto_init() }
func file_kayak_v1_kayak_proto_init() {
	if File_kayak_v1_kayak_proto != nil {
		return
	}
	file_kayak_v1_model_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kayak_v1_kayak_proto_rawDesc), len(file_kayak_v1_kayak_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kayak_v1_kayak_proto_goTypes,
		DependencyIndexes: file_kayak_v1_kayak_proto_depIdxs,
		MessageInfos:      file_kayak_v1_kayak_proto_msgTypes,
	}.Build()
	File_kayak_v1_kayak_proto = out.File
	file_kayak_v1_kayak_proto_goTypes = nil
	file_kayak_v1_kayak_proto_depIdxs = nil
}
