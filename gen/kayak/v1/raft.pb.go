// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kayak/v1/raft.proto

package kayakv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operation int32

const (
	Operation_OPERATION_UNSPECIFIED           Operation = 0
	Operation_OPERATION_PUT_STREAM            Operation = 1
	Operation_OPERATION_PUT_RECORDS           Operation = 2
	Operation_OPERATION_EXTEND_LEASE          Operation = 3
	Operation_OPERATION_REMOVE_LEASE          Operation = 4
	Operation_OPERATION_COMMIT_GROUP_POSITION Operation = 5
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "OPERATION_UNSPECIFIED",
		1: "OPERATION_PUT_STREAM",
		2: "OPERATION_PUT_RECORDS",
		3: "OPERATION_EXTEND_LEASE",
		4: "OPERATION_REMOVE_LEASE",
		5: "OPERATION_COMMIT_GROUP_POSITION",
	}
	Operation_value = map[string]int32{
		"OPERATION_UNSPECIFIED":           0,
		"OPERATION_PUT_STREAM":            1,
		"OPERATION_PUT_RECORDS":           2,
		"OPERATION_EXTEND_LEASE":          3,
		"OPERATION_REMOVE_LEASE":          4,
		"OPERATION_COMMIT_GROUP_POSITION": 5,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_kayak_v1_raft_proto_enumTypes[0].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_kayak_v1_raft_proto_enumTypes[0]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_kayak_v1_raft_proto_rawDescGZIP(), []int{0}
}

type RaftCommand struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Operation Operation              `protobuf:"varint,1,opt,name=operation,proto3,enum=kayak.v1.Operation" json:"operation,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*RaftCommand_PutStream
	//	*RaftCommand_PutRecords
	//	*RaftCommand_ExtendLease
	//	*RaftCommand_RemoveLease
	//	*RaftCommand_CommitGroupPosition
	Payload       isRaftCommand_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftCommand) Reset() {
	*x = RaftCommand{}
	mi := &file_kayak_v1_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCommand) ProtoMessage() {}

func (x *RaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCommand.ProtoReflect.Descriptor instead.
func (*RaftCommand) Descriptor() ([]byte, []int) {
	return file_kayak_v1_raft_proto_rawDescGZIP(), []int{0}
}

func (x *RaftCommand) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_OPERATION_UNSPECIFIED
}

func (x *RaftCommand) GetPayload() isRaftCommand_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RaftCommand) GetPutStream() *PutStream {
	if x != nil {
		if x, ok := x.Payload.(*RaftCommand_PutStream); ok {
			return x.PutStream
		}
	}
	return nil
}

func (x *RaftCommand) GetPutRecords() *PutRecords {
	if x != nil {
		if x, ok := x.Payload.(*RaftCommand_PutRecords); ok {
			return x.PutRecords
		}
	}
	return nil
}

func (x *RaftCommand) GetExtendLease() *ExtendLease {
	if x != nil {
		if x, ok := x.Payload.(*RaftCommand_ExtendLease); ok {
			return x.ExtendLease
		}
	}
	return nil
}

func (x *RaftCommand) GetRemoveLease() *RemoveLease {
	if x != nil {
		if x, ok := x.Payload.(*RaftCommand_RemoveLease); ok {
			return x.RemoveLease
		}
	}
	return nil
}

func (x *RaftCommand) GetCommitGroupPosition() *CommitGroupPosition {
	if x != nil {
		if x, ok := x.Payload.(*RaftCommand_CommitGroupPosition); ok {
			return x.CommitGroupPosition
		}
	}
	return nil
}

type isRaftCommand_Payload interface {
	isRaftCommand_Payload()
}

type RaftCommand_PutStream struct {
	PutStream *PutStream `protobuf:"bytes,2,opt,name=put_stream,json=putStream,proto3,oneof"`
}

type RaftCommand_PutRecords struct {
	PutRecords *PutRecords `protobuf:"bytes,3,opt,name=put_records,json=putRecords,proto3,oneof"`
}

type RaftCommand_ExtendLease struct {
	ExtendLease *ExtendLease `protobuf:"bytes,4,opt,name=extend_lease,json=extendLease,proto3,oneof"`
}

type RaftCommand_RemoveLease struct {
	RemoveLease *RemoveLease `protobuf:"bytes,5,opt,name=remove_lease,json=removeLease,proto3,oneof"`
}

type RaftCommand_CommitGroupPosition struct {
	CommitGroupPosition *CommitGroupPosition `protobuf:"bytes,6,opt,name=commit_group_position,json=commitGroupPosition,proto3,oneof"`
}

func (*RaftCommand_PutStream) isRaftCommand_Payload() {}

func (*RaftCommand_PutRecords) isRaftCommand_Payload() {}

func (*RaftCommand_ExtendLease) isRaftCommand_Payload() {}

func (*RaftCommand_RemoveLease) isRaftCommand_Payload() {}

func (*RaftCommand_CommitGroupPosition) isRaftCommand_Payload() {}

type PutStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        *Stream                `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutStream) Reset() {
	*x = PutStream{}
	mi := &file_kayak_v1_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutStream) ProtoMessage() {}

func (x *PutStream) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutStream.ProtoReflect.Descriptor instead.
func (*PutStream) Descriptor() ([]byte, []int) {
	return file_kayak_v1_raft_proto_rawDescGZIP(), []int{1}
}

func (x *PutStream) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type PutRecords struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamName    string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Records       []*Record              `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutRecords) Reset() {
	*x = PutRecords{}
	mi := &file_kayak_v1_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRecords) ProtoMessage() {}

func (x *PutRecords) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRecords.ProtoReflect.Descriptor instead.
func (*PutRecords) Descriptor() ([]byte, []int) {
	return file_kayak_v1_raft_proto_rawDescGZIP(), []int{2}
}

func (x *PutRecords) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *PutRecords) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type ExtendLease struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *Worker                `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	ExpiresMs     int64                  `protobuf:"varint,2,opt,name=expires_ms,json=expiresMs,proto3" json:"expires_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtendLease) Reset() {
	*x = ExtendLease{}
	mi := &file_kayak_v1_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtendLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendLease) ProtoMessage() {}

func (x *ExtendLease) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendLease.ProtoReflect.Descriptor instead.
func (*ExtendLease) Descriptor() ([]byte, []int) {
	return file_kayak_v1_raft_proto_rawDescGZIP(), []int{3}
}

func (x *ExtendLease) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *ExtendLease) GetExpiresMs() int64 {
	if x != nil {
		return x.ExpiresMs
	}
	return 0
}

type RemoveLease struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *Worker                `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLease) Reset() {
	*x = RemoveLease{}
	mi := &file_kayak_v1_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLease) ProtoMessage() {}

func (x *RemoveLease) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLease.ProtoReflect.Descriptor instead.
func (*RemoveLease) Descriptor() ([]byte, []int) {
	return file_kayak_v1_raft_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveLease) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

type CommitGroupPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamName    string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	GroupName     string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Partition     int64                  `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	Position      string                 `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitGroupPosition) Reset() {
	*x = CommitGroupPosition{}
	mi := &file_kayak_v1_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitGroupPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitGroupPosition) ProtoMessage() {}

func (x *CommitGroupPosition) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitGroupPosition.ProtoReflect.Descriptor instead.
func (*CommitGroupPosition) Descriptor() ([]byte, []int) {
	return file_kayak_v1_raft_proto_rawDescGZIP(), []int{5}
}

func (x *CommitGroupPosition) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *CommitGroupPosition) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CommitGroupPosition) GetPartition() int64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *CommitGroupPosition) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

var File_kayak_v1_raft_proto protoreflect.FileDescriptor

const file_kayak_v1_raft_proto_rawDesc = "" +
	"\n" +
	"\x13kayak/v1/raft.proto\x12\bkayak.v1\x1a\x14kayak/v1/model.proto\"\x87\x03\n" +
	"\vRaftCommand\x121\n" +
	"\toperation\x18\x01 \x01(\x0e2\x13.kayak.v1.OperationR\toperation\x124\n" +
	"\n" +
	"put_stream\x18\x02 \x01(\v2\x13.kayak.v1.PutStreamH\x00R\tputStream\x127\n" +
	"\vput_records\x18\x03 \x01(\v2\x14.kayak.v1.PutRecordsH\x00R\n" +
	"putRecords\x12:\n" +
	"\fextend_lease\x18\x04 \x01(\v2\x15.kayak.v1.ExtendLeaseH\x00R\vextendLease\x12:\n" +
	"\fremove_lease\x18\x05 \x01(\v2\x15.kayak.v1.RemoveLeaseH\x00R\vremoveLease\x12S\n" +
	"\x15commit_group_position\x18\x06 \x01(\v2\x1d.kayak.v1.CommitGroupPositionH\x00R\x13commitGroupPositionB\t\n" +
	"\apayload\"5\n" +
	"\tPutStream\x12(\n" +
	"\x06stream\x18\x01 \x01(\v2\x10.kayak.v1.StreamR\x06stream\"Y\n" +
	"\n" +
	"PutRecords\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12*\n" +
	"\arecords\x18\x02 \x03(\v2\x10.kayak.v1.RecordR\arecords\"V\n" +
	"\vExtendLease\x12(\n" +
	"\x06worker\x18\x01 \x01(\v2\x10.kayak.v1.WorkerR\x06worker\x12\x1d\n" +
	"\n" +
	"expires_ms\x18\x02 \x01(\x03R\texpiresMs\"7\n" +
	"\vRemoveLease\x12(\n" +
	"\x06worker\x18\x01 \x01(\v2\x10.kayak.v1.WorkerR\x06worker\"\x8f\x01\n" +
	"\x13CommitGroupPosition\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1d\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tR\tgroupName\x12\x1c\n" +
	"\tpartition\x18\x03 \x01(\x03R\tpartition\x12\x1a\n" +
	"\bposition\x18\x04 \x01(\tR\bposition*\xb8\x01\n" +
	"\tOperation\x12\x19\n" +
	"\x15OPERATION_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14OPERATION_PUT_STREAM\x10\x01\x12\x19\n" +
	"\x15OPERATION_PUT_RECORDS\x10\x02\x12\x1a\n" +
	"\x16OPERATION_EXTEND_LEASE\x10\x03\x12\x1a\n" +
	"\x16OPERATION_REMOVE_LEASE\x10\x04\x12#\n" +
	"\x1fOPERATION_COMMIT_GROUP_POSITION\x10\x05B\x8c\x01\n" +
	"\fcom.kayak.v1B\tRaftProtoP\x01Z0github.com/binarymatt/kayak/gen/kayak/v1;kayakv1\xa2\x02\x03KXX\xaa\x02\bKayak.V1\xca\x02\bKayak\\V1\xe2\x02\x14Kayak\\V1\\GPBMetadata\xea\x02\tKayak::V1b\x06proto3"

var (
	file_kayak_v1_raft_proto_rawDescOnce sync.Once
	file_kayak_v1_raft_proto_rawDescData []byte
)

func file_kayak_v1_raft_proto_rawDescGZIP() []byte {
	file_kayak_v1_raft_proto_rawDescOnce.Do(func() {
		file_kayak_v1_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kayak_v1_raft_proto_rawDesc), len(file_kayak_v1_raft_proto_rawDesc)))
	})
	return file_kayak_v1_raft_proto_rawDescData
}

var file_kayak_v1_raft_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kayak_v1_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kayak_v1_raft_proto_goTypes = []any{
	(Operation)(0),              // 0: kayak.v1.Operation
	(*RaftCommand)(nil),         // 1: kayak.v1.RaftCommand
	(*PutStream)(nil),           // 2: kayak.v1.PutStream
	(*PutRecords)(nil),          // 3: kayak.v1.PutRecords
	(*ExtendLease)(nil),         // 4: kayak.v1.ExtendLease
	(*RemoveLease)(nil),         // 5: kayak.v1.RemoveLease
	(*CommitGroupPosition)(nil), // 6: kayak.v1.CommitGroupPosition
	(*Stream)(nil),              // 7: kayak.v1.Stream
	(*Record)(nil),              // 8: kayak.v1.Record
	(*Worker)(nil),              // 9: kayak.v1.Worker
}
var file_kayak_v1_raft_proto_depIdxs = []int32{
	0,  // 0: kayak.v1.RaftCommand.operation:type_name -> kayak.v1.Operation
	2,  // 1: kayak.v1.RaftCommand.put_stream:type_name -> kayak.v1.PutStream
	3,  // 2: kayak.v1.RaftCommand.put_records:type_name -> kayak.v1.PutRecords
	4,  // 3: kayak.v1.RaftCommand.extend_lease:type_name -> kayak.v1.ExtendLease
	5,  // 4: kayak.v1.RaftCommand.remove_lease:type_name -> kayak.v1.RemoveLease
	6,  // 5: kayak.v1.RaftCommand.commit_group_position:type_name -> kayak.v1.CommitGroupPosition
	7,  // 6: kayak.v1.PutStream.stream:type_name -> kayak.v1.Stream
	8,  // 7: kayak.v1.PutRecords.records:type_name -> kayak.v1.Record
	9,  // 8: kayak.v1.ExtendLease.worker:type_name -> kayak.v1.Worker
	9,  // 9: kayak.v1.RemoveLease.worker:type_name -> kayak.v1.Worker
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_kayak_v1_raft_proto_init() }
func file_kayak_v1_raft_proto_init() {
	if File_kayak_v1_raft_proto != nil {
		return
	}
	file_kayak_v1_model_proto_init()
	file_kayak_v1_raft_proto_msgTypes[0].OneofWrappers = []any{
		(*RaftCommand_PutStream)(nil),
		(*RaftCommand_PutRecords)(nil),
		(*RaftCommand_ExtendLease)(nil),
		(*RaftCommand_RemoveLease)(nil),
		(*RaftCommand_CommitGroupPosition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kayak_v1_raft_proto_rawDesc), len(file_kayak_v1_raft_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kayak_v1_raft_proto_goTypes,
		DependencyIndexes: file_kayak_v1_raft_proto_depIdxs,
		EnumInfos:         file_kayak_v1_raft_proto_enumTypes,
		MessageInfos:      file_kayak_v1_raft_proto_msgTypes,
	}.Build()
	File_kayak_v1_raft_proto = out.File
	file_kayak_v1_raft_proto_goTypes = nil
	file_kayak_v1_raft_proto_depIdxs = nil
}
