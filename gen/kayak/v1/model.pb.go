// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kayak/v1/model.proto

package kayakv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stream struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PartitionCount int64                  `protobuf:"varint,2,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	Ttl            int64                  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Stats          *StreamStats           `protobuf:"bytes,4,opt,name=stats,proto3,oneof" json:"stats,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Stream) Reset() {
	*x = Stream{}
	mi := &file_kayak_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *Stream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stream) GetPartitionCount() int64 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *Stream) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Stream) GetStats() *StreamStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type StreamStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PartitionCounts map[int64]int64        `protobuf:"bytes,1,rep,name=partition_counts,json=partitionCounts,proto3" json:"partition_counts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RecordCount     int64                  `protobuf:"varint,2,opt,name=record_count,json=recordCount,proto3" json:"record_count,omitempty"`
	Groups          []*Group               `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamStats) Reset() {
	*x = StreamStats{}
	mi := &file_kayak_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStats) ProtoMessage() {}

func (x *StreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStats.ProtoReflect.Descriptor instead.
func (*StreamStats) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *StreamStats) GetPartitionCounts() map[int64]int64 {
	if x != nil {
		return x.PartitionCounts
	}
	return nil
}

func (x *StreamStats) GetRecordCount() int64 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

func (x *StreamStats) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Group struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	StreamName         string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PartitionPositions map[int64]string       `protobuf:"bytes,3,rep,name=partition_positions,json=partitionPositions,proto3" json:"partition_positions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Group) Reset() {
	*x = Group{}
	mi := &file_kayak_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *Group) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetPartitionPositions() map[int64]string {
	if x != nil {
		return x.PartitionPositions
	}
	return nil
}

type PartitionAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamName    string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	GroupName     string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Partition     int64                  `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	WorkerId      string                 `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionAssignment) Reset() {
	*x = PartitionAssignment{}
	mi := &file_kayak_v1_model_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionAssignment) ProtoMessage() {}

func (x *PartitionAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionAssignment.ProtoReflect.Descriptor instead.
func (*PartitionAssignment) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{3}
}

func (x *PartitionAssignment) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *PartitionAssignment) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *PartitionAssignment) GetPartition() int64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *PartitionAssignment) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *PartitionAssignment) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type Worker struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	StreamName          string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	GroupName           string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Id                  string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	PartitionAssignment int64                  `protobuf:"varint,4,opt,name=partition_assignment,json=partitionAssignment,proto3" json:"partition_assignment,omitempty"`
	Position            string                 `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	LeaseExpires        int64                  `protobuf:"varint,6,opt,name=lease_expires,json=leaseExpires,proto3" json:"lease_expires,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_kayak_v1_model_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{4}
}

func (x *Worker) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Worker) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Worker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Worker) GetPartitionAssignment() int64 {
	if x != nil {
		return x.PartitionAssignment
	}
	return 0
}

func (x *Worker) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Worker) GetLeaseExpires() int64 {
	if x != nil {
		return x.LeaseExpires
	}
	return 0
}

type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of the stream the record is being added to. Will be set by PutRecordsRequest
	StreamName string `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// partition is set by server.
	Partition int64 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// id is used to hashed and used for partition assignment, can be set by client.
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// internal id is used as identifier in partition stream. Set by server.
	InternalId    string            `protobuf:"bytes,4,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	Headers       map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Payload       []byte            `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_kayak_v1_model_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{5}
}

func (x *Record) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Record) GetPartition() int64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *Record) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Record) GetInternalId() string {
	if x != nil {
		return x.InternalId
	}
	return ""
}

func (x *Record) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Record) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_kayak_v1_model_proto protoreflect.FileDescriptor

const file_kayak_v1_model_proto_rawDesc = "" +
	"\n" +
	"\x14kayak/v1/model.proto\x12\bkayak.v1\x1a\x1bbuf/validate/validate.proto\"\x93\x01\n" +
	"\x06Stream\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12'\n" +
	"\x0fpartition_count\x18\x02 \x01(\x03R\x0epartitionCount\x12\x10\n" +
	"\x03ttl\x18\x03 \x01(\x03R\x03ttl\x120\n" +
	"\x05stats\x18\x04 \x01(\v2\x15.kayak.v1.StreamStatsH\x00R\x05stats\x88\x01\x01B\b\n" +
	"\x06_stats\"\xf4\x01\n" +
	"\vStreamStats\x12U\n" +
	"\x10partition_counts\x18\x01 \x03(\v2*.kayak.v1.StreamStats.PartitionCountsEntryR\x0fpartitionCounts\x12!\n" +
	"\frecord_count\x18\x02 \x01(\x03R\vrecordCount\x12'\n" +
	"\x06groups\x18\x03 \x03(\v2\x0f.kayak.v1.GroupR\x06groups\x1aB\n" +
	"\x14PartitionCountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xdd\x01\n" +
	"\x05Group\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12X\n" +
	"\x13partition_positions\x18\x03 \x03(\v2'.kayak.v1.Group.PartitionPositionsEntryR\x12partitionPositions\x1aE\n" +
	"\x17PartitionPositionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xaf\x01\n" +
	"\x13PartitionAssignment\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1d\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tR\tgroupName\x12\x1c\n" +
	"\tpartition\x18\x03 \x01(\x03R\tpartition\x12\x1b\n" +
	"\tworker_id\x18\x04 \x01(\tR\bworkerId\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x05 \x01(\x03R\texpiresAt\"\xcc\x01\n" +
	"\x06Worker\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1d\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tR\tgroupName\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\x121\n" +
	"\x14partition_assignment\x18\x04 \x01(\x03R\x13partitionAssignment\x12\x1a\n" +
	"\bposition\x18\x05 \x01(\tR\bposition\x12#\n" +
	"\rlease_expires\x18\x06 \x01(\x03R\fleaseExpires\"\x8f\x02\n" +
	"\x06Record\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\x03R\tpartition\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\fR\x02id\x12\x1f\n" +
	"\vinternal_id\x18\x04 \x01(\tR\n" +
	"internalId\x127\n" +
	"\aheaders\x18\x05 \x03(\v2\x1d.kayak.v1.Record.HeadersEntryR\aheaders\x12 \n" +
	"\apayload\x18\x06 \x01(\fB\x06\xbaH\x03\xc8\x01\x01R\apayload\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x8d\x01\n" +
	"\fcom.kayak.v1B\n" +
	"ModelProtoP\x01Z0github.com/binarymatt/kayak/gen/kayak/v1;kayakv1\xa2\x02\x03KXX\xaa\x02\bKayak.V1\xca\x02\bKayak\\V1\xe2\x02\x14Kayak\\V1\\GPBMetadata\xea\x02\tKayak::V1b\x06proto3"

var (
	file_kayak_v1_model_proto_rawDescOnce sync.Once
	file_kayak_v1_model_proto_rawDescData []byte
)

func file_kayak_v1_model_proto_rawDescGZIP() []byte {
	file_kayak_v1_model_proto_rawDescOnce.Do(func() {
		file_kayak_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kayak_v1_model_proto_rawDesc), len(file_kayak_v1_model_proto_rawDesc)))
	})
	return file_kayak_v1_model_proto_rawDescData
}

var file_kayak_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_kayak_v1_model_proto_goTypes = []any{
	(*Stream)(nil),              // 0: kayak.v1.Stream
	(*StreamStats)(nil),         // 1: kayak.v1.StreamStats
	(*Group)(nil),               // 2: kayak.v1.Group
	(*PartitionAssignment)(nil), // 3: kayak.v1.PartitionAssignment
	(*Worker)(nil),              // 4: kayak.v1.Worker
	(*Record)(nil),              // 5: kayak.v1.Record
	nil,                         // 6: kayak.v1.StreamStats.PartitionCountsEntry
	nil,                         // 7: kayak.v1.Group.PartitionPositionsEntry
	nil,                         // 8: kayak.v1.Record.HeadersEntry
}
var file_kayak_v1_model_proto_depIdxs = []int32{
	1, // 0: kayak.v1.Stream.stats:type_name -> kayak.v1.StreamStats
	6, // 1: kayak.v1.StreamStats.partition_counts:type_name -> kayak.v1.StreamStats.PartitionCountsEntry
	2, // 2: kayak.v1.StreamStats.groups:type_name -> kayak.v1.Group
	7, // 3: kayak.v1.Group.partition_positions:type_name -> kayak.v1.Group.PartitionPositionsEntry
	8, // 4: kayak.v1.Record.headers:type_name -> kayak.v1.Record.HeadersEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kayak_v1_model_proto_init() }
func file_kayak_v1_model_proto_init() {
	if File_kayak_v1_model_proto != nil {
		return
	}
	file_kayak_v1_model_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kayak_v1_model_proto_rawDesc), len(file_kayak_v1_model_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kayak_v1_model_proto_goTypes,
		DependencyIndexes: file_kayak_v1_model_proto_depIdxs,
		MessageInfos:      file_kayak_v1_model_proto_msgTypes,
	}.Build()
	File_kayak_v1_model_proto = out.File
	file_kayak_v1_model_proto_goTypes = nil
	file_kayak_v1_model_proto_depIdxs = nil
}
