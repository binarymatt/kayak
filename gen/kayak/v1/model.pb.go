// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: kayak/v1/model.proto

package kayakv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stream struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PartitionCount int64                  `protobuf:"varint,2,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	Ttl            int64                  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Stream) Reset() {
	*x = Stream{}
	mi := &file_kayak_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *Stream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stream) GetPartitionCount() int64 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *Stream) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type Worker struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	StreamName          string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	GroupName           string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Id                  string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	PartitionAssignment int64                  `protobuf:"varint,4,opt,name=partition_assignment,json=partitionAssignment,proto3" json:"partition_assignment,omitempty"`
	Position            string                 `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	LeaseExpires        int64                  `protobuf:"varint,6,opt,name=lease_expires,json=leaseExpires,proto3" json:"lease_expires,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_kayak_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *Worker) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Worker) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Worker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Worker) GetPartitionAssignment() int64 {
	if x != nil {
		return x.PartitionAssignment
	}
	return 0
}

func (x *Worker) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Worker) GetLeaseExpires() int64 {
	if x != nil {
		return x.LeaseExpires
	}
	return 0
}

type Record struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	StreamName string                 `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	Partition  int64                  `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	// id is used to hashed and used for partition assignment, can be set by client.
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// internal id is used as identifier in partition stream
	InternalId    []byte            `protobuf:"bytes,4,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	Headers       map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Payload       []byte            `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_kayak_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_kayak_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_kayak_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *Record) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Record) GetPartition() int64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *Record) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Record) GetInternalId() []byte {
	if x != nil {
		return x.InternalId
	}
	return nil
}

func (x *Record) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Record) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_kayak_v1_model_proto protoreflect.FileDescriptor

const file_kayak_v1_model_proto_rawDesc = "" +
	"\n" +
	"\x14kayak/v1/model.proto\x12\bkayak.v1\x1a\x1bbuf/validate/validate.proto\"W\n" +
	"\x06Stream\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12'\n" +
	"\x0fpartition_count\x18\x02 \x01(\x03R\x0epartitionCount\x12\x10\n" +
	"\x03ttl\x18\x03 \x01(\x03R\x03ttl\"\xcc\x01\n" +
	"\x06Worker\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1d\n" +
	"\n" +
	"group_name\x18\x02 \x01(\tR\tgroupName\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\x121\n" +
	"\x14partition_assignment\x18\x04 \x01(\x03R\x13partitionAssignment\x12\x1a\n" +
	"\bposition\x18\x05 \x01(\tR\bposition\x12#\n" +
	"\rlease_expires\x18\x06 \x01(\x03R\fleaseExpires\"\x8f\x02\n" +
	"\x06Record\x12\x1f\n" +
	"\vstream_name\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\x03R\tpartition\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\fR\x02id\x12\x1f\n" +
	"\vinternal_id\x18\x04 \x01(\fR\n" +
	"internalId\x127\n" +
	"\aheaders\x18\x05 \x03(\v2\x1d.kayak.v1.Record.HeadersEntryR\aheaders\x12 \n" +
	"\apayload\x18\x06 \x01(\fB\x06\xbaH\x03\xc8\x01\x01R\apayload\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x8d\x01\n" +
	"\fcom.kayak.v1B\n" +
	"ModelProtoP\x01Z0github.com/binarymatt/kayak/gen/kayak/v1;kayakv1\xa2\x02\x03KXX\xaa\x02\bKayak.V1\xca\x02\bKayak\\V1\xe2\x02\x14Kayak\\V1\\GPBMetadata\xea\x02\tKayak::V1b\x06proto3"

var (
	file_kayak_v1_model_proto_rawDescOnce sync.Once
	file_kayak_v1_model_proto_rawDescData []byte
)

func file_kayak_v1_model_proto_rawDescGZIP() []byte {
	file_kayak_v1_model_proto_rawDescOnce.Do(func() {
		file_kayak_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kayak_v1_model_proto_rawDesc), len(file_kayak_v1_model_proto_rawDesc)))
	})
	return file_kayak_v1_model_proto_rawDescData
}

var file_kayak_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kayak_v1_model_proto_goTypes = []any{
	(*Stream)(nil), // 0: kayak.v1.Stream
	(*Worker)(nil), // 1: kayak.v1.Worker
	(*Record)(nil), // 2: kayak.v1.Record
	nil,            // 3: kayak.v1.Record.HeadersEntry
}
var file_kayak_v1_model_proto_depIdxs = []int32{
	3, // 0: kayak.v1.Record.headers:type_name -> kayak.v1.Record.HeadersEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kayak_v1_model_proto_init() }
func file_kayak_v1_model_proto_init() {
	if File_kayak_v1_model_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kayak_v1_model_proto_rawDesc), len(file_kayak_v1_model_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kayak_v1_model_proto_goTypes,
		DependencyIndexes: file_kayak_v1_model_proto_depIdxs,
		MessageInfos:      file_kayak_v1_model_proto_msgTypes,
	}.Build()
	File_kayak_v1_model_proto = out.File
	file_kayak_v1_model_proto_goTypes = nil
	file_kayak_v1_model_proto_depIdxs = nil
}
