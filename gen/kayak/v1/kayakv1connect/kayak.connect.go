// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kayak/v1/kayak.proto

package kayakv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/binarymatt/kayak/gen/kayak/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KayakServiceName is the fully-qualified name of the KayakService service.
	KayakServiceName = "kayak.v1.KayakService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KayakServicePutRecordsProcedure is the fully-qualified name of the KayakService's PutRecords RPC.
	KayakServicePutRecordsProcedure = "/kayak.v1.KayakService/PutRecords"
	// KayakServiceGetRecordsProcedure is the fully-qualified name of the KayakService's GetRecords RPC.
	KayakServiceGetRecordsProcedure = "/kayak.v1.KayakService/GetRecords"
	// KayakServiceFetchRecordsProcedure is the fully-qualified name of the KayakService's FetchRecords
	// RPC.
	KayakServiceFetchRecordsProcedure = "/kayak.v1.KayakService/FetchRecords"
	// KayakServiceCommitRecordProcedure is the fully-qualified name of the KayakService's CommitRecord
	// RPC.
	KayakServiceCommitRecordProcedure = "/kayak.v1.KayakService/CommitRecord"
	// KayakServiceRegisterWorkerProcedure is the fully-qualified name of the KayakService's
	// RegisterWorker RPC.
	KayakServiceRegisterWorkerProcedure = "/kayak.v1.KayakService/RegisterWorker"
	// KayakServiceDeregisterWorkerProcedure is the fully-qualified name of the KayakService's
	// DeregisterWorker RPC.
	KayakServiceDeregisterWorkerProcedure = "/kayak.v1.KayakService/DeregisterWorker"
	// KayakServiceCreateStreamProcedure is the fully-qualified name of the KayakService's CreateStream
	// RPC.
	KayakServiceCreateStreamProcedure = "/kayak.v1.KayakService/CreateStream"
)

// KayakServiceClient is a client for the kayak.v1.KayakService service.
type KayakServiceClient interface {
	// Record Operations
	// PutRecords adds records to the stream
	PutRecords(context.Context, *connect.Request[v1.PutRecordsRequest]) (*connect.Response[emptypb.Empty], error)
	GetRecords(context.Context, *connect.Request[v1.GetRecordsRequest]) (*connect.Response[v1.GetRecordsResponse], error)
	FetchRecords(context.Context, *connect.Request[v1.FetchRecordsRequest]) (*connect.Response[v1.FetchRecordsResponse], error)
	CommitRecord(context.Context, *connect.Request[v1.CommitRecordRequest]) (*connect.Response[emptypb.Empty], error)
	// Worker Operations
	RegisterWorker(context.Context, *connect.Request[v1.RegisterWorkerRequest]) (*connect.Response[v1.RegisterWorkerResponse], error)
	DeregisterWorker(context.Context, *connect.Request[v1.DeregisterWorkerRequest]) (*connect.Response[emptypb.Empty], error)
	// Stream Operations
	CreateStream(context.Context, *connect.Request[v1.CreateStreamRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewKayakServiceClient constructs a client for the kayak.v1.KayakService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKayakServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KayakServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kayakServiceMethods := v1.File_kayak_v1_kayak_proto.Services().ByName("KayakService").Methods()
	return &kayakServiceClient{
		putRecords: connect.NewClient[v1.PutRecordsRequest, emptypb.Empty](
			httpClient,
			baseURL+KayakServicePutRecordsProcedure,
			connect.WithSchema(kayakServiceMethods.ByName("PutRecords")),
			connect.WithClientOptions(opts...),
		),
		getRecords: connect.NewClient[v1.GetRecordsRequest, v1.GetRecordsResponse](
			httpClient,
			baseURL+KayakServiceGetRecordsProcedure,
			connect.WithSchema(kayakServiceMethods.ByName("GetRecords")),
			connect.WithClientOptions(opts...),
		),
		fetchRecords: connect.NewClient[v1.FetchRecordsRequest, v1.FetchRecordsResponse](
			httpClient,
			baseURL+KayakServiceFetchRecordsProcedure,
			connect.WithSchema(kayakServiceMethods.ByName("FetchRecords")),
			connect.WithClientOptions(opts...),
		),
		commitRecord: connect.NewClient[v1.CommitRecordRequest, emptypb.Empty](
			httpClient,
			baseURL+KayakServiceCommitRecordProcedure,
			connect.WithSchema(kayakServiceMethods.ByName("CommitRecord")),
			connect.WithClientOptions(opts...),
		),
		registerWorker: connect.NewClient[v1.RegisterWorkerRequest, v1.RegisterWorkerResponse](
			httpClient,
			baseURL+KayakServiceRegisterWorkerProcedure,
			connect.WithSchema(kayakServiceMethods.ByName("RegisterWorker")),
			connect.WithClientOptions(opts...),
		),
		deregisterWorker: connect.NewClient[v1.DeregisterWorkerRequest, emptypb.Empty](
			httpClient,
			baseURL+KayakServiceDeregisterWorkerProcedure,
			connect.WithSchema(kayakServiceMethods.ByName("DeregisterWorker")),
			connect.WithClientOptions(opts...),
		),
		createStream: connect.NewClient[v1.CreateStreamRequest, emptypb.Empty](
			httpClient,
			baseURL+KayakServiceCreateStreamProcedure,
			connect.WithSchema(kayakServiceMethods.ByName("CreateStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kayakServiceClient implements KayakServiceClient.
type kayakServiceClient struct {
	putRecords       *connect.Client[v1.PutRecordsRequest, emptypb.Empty]
	getRecords       *connect.Client[v1.GetRecordsRequest, v1.GetRecordsResponse]
	fetchRecords     *connect.Client[v1.FetchRecordsRequest, v1.FetchRecordsResponse]
	commitRecord     *connect.Client[v1.CommitRecordRequest, emptypb.Empty]
	registerWorker   *connect.Client[v1.RegisterWorkerRequest, v1.RegisterWorkerResponse]
	deregisterWorker *connect.Client[v1.DeregisterWorkerRequest, emptypb.Empty]
	createStream     *connect.Client[v1.CreateStreamRequest, emptypb.Empty]
}

// PutRecords calls kayak.v1.KayakService.PutRecords.
func (c *kayakServiceClient) PutRecords(ctx context.Context, req *connect.Request[v1.PutRecordsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.putRecords.CallUnary(ctx, req)
}

// GetRecords calls kayak.v1.KayakService.GetRecords.
func (c *kayakServiceClient) GetRecords(ctx context.Context, req *connect.Request[v1.GetRecordsRequest]) (*connect.Response[v1.GetRecordsResponse], error) {
	return c.getRecords.CallUnary(ctx, req)
}

// FetchRecords calls kayak.v1.KayakService.FetchRecords.
func (c *kayakServiceClient) FetchRecords(ctx context.Context, req *connect.Request[v1.FetchRecordsRequest]) (*connect.Response[v1.FetchRecordsResponse], error) {
	return c.fetchRecords.CallUnary(ctx, req)
}

// CommitRecord calls kayak.v1.KayakService.CommitRecord.
func (c *kayakServiceClient) CommitRecord(ctx context.Context, req *connect.Request[v1.CommitRecordRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.commitRecord.CallUnary(ctx, req)
}

// RegisterWorker calls kayak.v1.KayakService.RegisterWorker.
func (c *kayakServiceClient) RegisterWorker(ctx context.Context, req *connect.Request[v1.RegisterWorkerRequest]) (*connect.Response[v1.RegisterWorkerResponse], error) {
	return c.registerWorker.CallUnary(ctx, req)
}

// DeregisterWorker calls kayak.v1.KayakService.DeregisterWorker.
func (c *kayakServiceClient) DeregisterWorker(ctx context.Context, req *connect.Request[v1.DeregisterWorkerRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deregisterWorker.CallUnary(ctx, req)
}

// CreateStream calls kayak.v1.KayakService.CreateStream.
func (c *kayakServiceClient) CreateStream(ctx context.Context, req *connect.Request[v1.CreateStreamRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createStream.CallUnary(ctx, req)
}

// KayakServiceHandler is an implementation of the kayak.v1.KayakService service.
type KayakServiceHandler interface {
	// Record Operations
	// PutRecords adds records to the stream
	PutRecords(context.Context, *connect.Request[v1.PutRecordsRequest]) (*connect.Response[emptypb.Empty], error)
	GetRecords(context.Context, *connect.Request[v1.GetRecordsRequest]) (*connect.Response[v1.GetRecordsResponse], error)
	FetchRecords(context.Context, *connect.Request[v1.FetchRecordsRequest]) (*connect.Response[v1.FetchRecordsResponse], error)
	CommitRecord(context.Context, *connect.Request[v1.CommitRecordRequest]) (*connect.Response[emptypb.Empty], error)
	// Worker Operations
	RegisterWorker(context.Context, *connect.Request[v1.RegisterWorkerRequest]) (*connect.Response[v1.RegisterWorkerResponse], error)
	DeregisterWorker(context.Context, *connect.Request[v1.DeregisterWorkerRequest]) (*connect.Response[emptypb.Empty], error)
	// Stream Operations
	CreateStream(context.Context, *connect.Request[v1.CreateStreamRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewKayakServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKayakServiceHandler(svc KayakServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kayakServiceMethods := v1.File_kayak_v1_kayak_proto.Services().ByName("KayakService").Methods()
	kayakServicePutRecordsHandler := connect.NewUnaryHandler(
		KayakServicePutRecordsProcedure,
		svc.PutRecords,
		connect.WithSchema(kayakServiceMethods.ByName("PutRecords")),
		connect.WithHandlerOptions(opts...),
	)
	kayakServiceGetRecordsHandler := connect.NewUnaryHandler(
		KayakServiceGetRecordsProcedure,
		svc.GetRecords,
		connect.WithSchema(kayakServiceMethods.ByName("GetRecords")),
		connect.WithHandlerOptions(opts...),
	)
	kayakServiceFetchRecordsHandler := connect.NewUnaryHandler(
		KayakServiceFetchRecordsProcedure,
		svc.FetchRecords,
		connect.WithSchema(kayakServiceMethods.ByName("FetchRecords")),
		connect.WithHandlerOptions(opts...),
	)
	kayakServiceCommitRecordHandler := connect.NewUnaryHandler(
		KayakServiceCommitRecordProcedure,
		svc.CommitRecord,
		connect.WithSchema(kayakServiceMethods.ByName("CommitRecord")),
		connect.WithHandlerOptions(opts...),
	)
	kayakServiceRegisterWorkerHandler := connect.NewUnaryHandler(
		KayakServiceRegisterWorkerProcedure,
		svc.RegisterWorker,
		connect.WithSchema(kayakServiceMethods.ByName("RegisterWorker")),
		connect.WithHandlerOptions(opts...),
	)
	kayakServiceDeregisterWorkerHandler := connect.NewUnaryHandler(
		KayakServiceDeregisterWorkerProcedure,
		svc.DeregisterWorker,
		connect.WithSchema(kayakServiceMethods.ByName("DeregisterWorker")),
		connect.WithHandlerOptions(opts...),
	)
	kayakServiceCreateStreamHandler := connect.NewUnaryHandler(
		KayakServiceCreateStreamProcedure,
		svc.CreateStream,
		connect.WithSchema(kayakServiceMethods.ByName("CreateStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/kayak.v1.KayakService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KayakServicePutRecordsProcedure:
			kayakServicePutRecordsHandler.ServeHTTP(w, r)
		case KayakServiceGetRecordsProcedure:
			kayakServiceGetRecordsHandler.ServeHTTP(w, r)
		case KayakServiceFetchRecordsProcedure:
			kayakServiceFetchRecordsHandler.ServeHTTP(w, r)
		case KayakServiceCommitRecordProcedure:
			kayakServiceCommitRecordHandler.ServeHTTP(w, r)
		case KayakServiceRegisterWorkerProcedure:
			kayakServiceRegisterWorkerHandler.ServeHTTP(w, r)
		case KayakServiceDeregisterWorkerProcedure:
			kayakServiceDeregisterWorkerHandler.ServeHTTP(w, r)
		case KayakServiceCreateStreamProcedure:
			kayakServiceCreateStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKayakServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKayakServiceHandler struct{}

func (UnimplementedKayakServiceHandler) PutRecords(context.Context, *connect.Request[v1.PutRecordsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kayak.v1.KayakService.PutRecords is not implemented"))
}

func (UnimplementedKayakServiceHandler) GetRecords(context.Context, *connect.Request[v1.GetRecordsRequest]) (*connect.Response[v1.GetRecordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kayak.v1.KayakService.GetRecords is not implemented"))
}

func (UnimplementedKayakServiceHandler) FetchRecords(context.Context, *connect.Request[v1.FetchRecordsRequest]) (*connect.Response[v1.FetchRecordsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kayak.v1.KayakService.FetchRecords is not implemented"))
}

func (UnimplementedKayakServiceHandler) CommitRecord(context.Context, *connect.Request[v1.CommitRecordRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kayak.v1.KayakService.CommitRecord is not implemented"))
}

func (UnimplementedKayakServiceHandler) RegisterWorker(context.Context, *connect.Request[v1.RegisterWorkerRequest]) (*connect.Response[v1.RegisterWorkerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kayak.v1.KayakService.RegisterWorker is not implemented"))
}

func (UnimplementedKayakServiceHandler) DeregisterWorker(context.Context, *connect.Request[v1.DeregisterWorkerRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kayak.v1.KayakService.DeregisterWorker is not implemented"))
}

func (UnimplementedKayakServiceHandler) CreateStream(context.Context, *connect.Request[v1.CreateStreamRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kayak.v1.KayakService.CreateStream is not implemented"))
}
